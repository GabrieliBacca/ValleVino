// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//modelo User para fazer o cadastro de usuario
model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  telephone BigInt     @unique
  password  String
  address   String
  birthday  DateTime
  gender    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Review    Review[]
  Shopping  Shopping[]
}

//modelo Review para os posts de review do usuario
model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  review    String
  Wine      Wine?    @relation(fields: [wineId], references: [id])
  wineId    Int?
}

model Shopping {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopping  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Wine      Wine[]
}

//modelo Type para o tipo de vinho: espumante, tinto, champagne...
model Type {
  id   Int    @id @default(autoincrement())
  type String @unique
  Wine Wine[]
}

//modelo Country para os paises 
model Country {
  id      Int    @id @default(autoincrement())
  country String @unique
  Wine    Wine[]
}

//modelo Grape para as uvas
model Grape {
  id    Int    @id @default(autoincrement())
  grape String @unique
  Wine  Wine[]
}

// modelo Harmony para fazer a harmonização, o que combina....
model Harmony {
  id          Int           @id @default(autoincrement())
  harmony     String        @unique
  WineHarmony WineHarmony[]
  Wine        Wine[]
}

// modelo Wine para os vinhos
model Wine {
  id          Int    @id @default(autoincrement())
  label       String
  price       Float
  quantity    Int
  vinicula    String
  year        Int
  alchoolic   Int
  description String

  type   Type @relation(fields: [typeId], references: [id]) //se nao for depois atualizo pelo ID...
  typeId Int

  country   Country @relation(fields: [countryId], references: [id])
  countryId Int

  grape   Grape @relation(fields: [grapeId], references: [id])
  grapeId Int

  review Review[]

  harmony   Harmony @relation(fields: [harmonyId], references: [id])
  harmonyId Int

  WineHarmony WineHarmony[]
  Shopping    Shopping?     @relation(fields: [shoppingId], references: [id])
  shoppingId  Int?
}

// tabela intermediária WineHarmony N para N
model WineHarmony {
  wine   Wine @relation(fields: [wineId], references: [id])
  wineId Int

  harmony   Harmony @relation(fields: [harmonyId], references: [id])
  harmonyId Int

  @@id([wineId, harmonyId])
}
