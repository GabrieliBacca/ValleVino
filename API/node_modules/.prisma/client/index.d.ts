
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Shopping
 * 
 */
export type Shopping = $Result.DefaultSelection<Prisma.$ShoppingPayload>
/**
 * Model Type
 * 
 */
export type Type = $Result.DefaultSelection<Prisma.$TypePayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model Grape
 * 
 */
export type Grape = $Result.DefaultSelection<Prisma.$GrapePayload>
/**
 * Model Harmony
 * 
 */
export type Harmony = $Result.DefaultSelection<Prisma.$HarmonyPayload>
/**
 * Model Wine
 * 
 */
export type Wine = $Result.DefaultSelection<Prisma.$WinePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.shopping`: Exposes CRUD operations for the **Shopping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shoppings
    * const shoppings = await prisma.shopping.findMany()
    * ```
    */
  get shopping(): Prisma.ShoppingDelegate<ExtArgs>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<ExtArgs>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs>;

  /**
   * `prisma.grape`: Exposes CRUD operations for the **Grape** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grapes
    * const grapes = await prisma.grape.findMany()
    * ```
    */
  get grape(): Prisma.GrapeDelegate<ExtArgs>;

  /**
   * `prisma.harmony`: Exposes CRUD operations for the **Harmony** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Harmonies
    * const harmonies = await prisma.harmony.findMany()
    * ```
    */
  get harmony(): Prisma.HarmonyDelegate<ExtArgs>;

  /**
   * `prisma.wine`: Exposes CRUD operations for the **Wine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wines
    * const wines = await prisma.wine.findMany()
    * ```
    */
  get wine(): Prisma.WineDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Review: 'Review',
    Shopping: 'Shopping',
    Type: 'Type',
    Country: 'Country',
    Grape: 'Grape',
    Harmony: 'Harmony',
    Wine: 'Wine'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'review' | 'shopping' | 'type' | 'country' | 'grape' | 'harmony' | 'wine'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Shopping: {
        payload: Prisma.$ShoppingPayload<ExtArgs>
        fields: Prisma.ShoppingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          findFirst: {
            args: Prisma.ShoppingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          findMany: {
            args: Prisma.ShoppingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>[]
          }
          create: {
            args: Prisma.ShoppingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          delete: {
            args: Prisma.ShoppingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          update: {
            args: Prisma.ShoppingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ShoppingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ShoppingPayload>
          }
          aggregate: {
            args: Prisma.ShoppingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateShopping>
          }
          groupBy: {
            args: Prisma.ShoppingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ShoppingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingCountArgs<ExtArgs>,
            result: $Utils.Optional<ShoppingCountAggregateOutputType> | number
          }
        }
      }
      Type: {
        payload: Prisma.$TypePayload<ExtArgs>
        fields: Prisma.TypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findFirst: {
            args: Prisma.TypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findMany: {
            args: Prisma.TypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>[]
          }
          create: {
            args: Prisma.TypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          delete: {
            args: Prisma.TypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          update: {
            args: Prisma.TypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          deleteMany: {
            args: Prisma.TypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          aggregate: {
            args: Prisma.TypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateType>
          }
          groupBy: {
            args: Prisma.TypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypeCountArgs<ExtArgs>,
            result: $Utils.Optional<TypeCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>,
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      Grape: {
        payload: Prisma.$GrapePayload<ExtArgs>
        fields: Prisma.GrapeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrapeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrapeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          findFirst: {
            args: Prisma.GrapeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrapeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          findMany: {
            args: Prisma.GrapeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>[]
          }
          create: {
            args: Prisma.GrapeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          delete: {
            args: Prisma.GrapeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          update: {
            args: Prisma.GrapeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          deleteMany: {
            args: Prisma.GrapeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GrapeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GrapeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GrapePayload>
          }
          aggregate: {
            args: Prisma.GrapeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGrape>
          }
          groupBy: {
            args: Prisma.GrapeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GrapeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrapeCountArgs<ExtArgs>,
            result: $Utils.Optional<GrapeCountAggregateOutputType> | number
          }
        }
      }
      Harmony: {
        payload: Prisma.$HarmonyPayload<ExtArgs>
        fields: Prisma.HarmonyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HarmonyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HarmonyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          findFirst: {
            args: Prisma.HarmonyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HarmonyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          findMany: {
            args: Prisma.HarmonyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>[]
          }
          create: {
            args: Prisma.HarmonyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          delete: {
            args: Prisma.HarmonyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          update: {
            args: Prisma.HarmonyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          deleteMany: {
            args: Prisma.HarmonyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HarmonyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HarmonyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HarmonyPayload>
          }
          aggregate: {
            args: Prisma.HarmonyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHarmony>
          }
          groupBy: {
            args: Prisma.HarmonyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HarmonyGroupByOutputType>[]
          }
          count: {
            args: Prisma.HarmonyCountArgs<ExtArgs>,
            result: $Utils.Optional<HarmonyCountAggregateOutputType> | number
          }
        }
      }
      Wine: {
        payload: Prisma.$WinePayload<ExtArgs>
        fields: Prisma.WineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WineFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WineFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          findFirst: {
            args: Prisma.WineFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WineFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          findMany: {
            args: Prisma.WineFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>[]
          }
          create: {
            args: Prisma.WineCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          delete: {
            args: Prisma.WineDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          update: {
            args: Prisma.WineUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          deleteMany: {
            args: Prisma.WineDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WineUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WineUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          aggregate: {
            args: Prisma.WineAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWine>
          }
          groupBy: {
            args: Prisma.WineGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WineGroupByOutputType>[]
          }
          count: {
            args: Prisma.WineCountArgs<ExtArgs>,
            result: $Utils.Optional<WineCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Review: number
    Shopping: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | UserCountOutputTypeCountReviewArgs
    Shopping?: boolean | UserCountOutputTypeCountShoppingArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingWhereInput
  }



  /**
   * Count Type ShoppingCountOutputType
   */

  export type ShoppingCountOutputType = {
    Wine: number
  }

  export type ShoppingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | ShoppingCountOutputTypeCountWineArgs
  }

  // Custom InputTypes

  /**
   * ShoppingCountOutputType without action
   */
  export type ShoppingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCountOutputType
     */
    select?: ShoppingCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ShoppingCountOutputType without action
   */
  export type ShoppingCountOutputTypeCountWineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }



  /**
   * Count Type TypeCountOutputType
   */

  export type TypeCountOutputType = {
    Wine: number
  }

  export type TypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | TypeCountOutputTypeCountWineArgs
  }

  // Custom InputTypes

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeCountWineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }



  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    Wine: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | CountryCountOutputTypeCountWineArgs
  }

  // Custom InputTypes

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountWineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }



  /**
   * Count Type GrapeCountOutputType
   */

  export type GrapeCountOutputType = {
    Wine: number
  }

  export type GrapeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | GrapeCountOutputTypeCountWineArgs
  }

  // Custom InputTypes

  /**
   * GrapeCountOutputType without action
   */
  export type GrapeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrapeCountOutputType
     */
    select?: GrapeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GrapeCountOutputType without action
   */
  export type GrapeCountOutputTypeCountWineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }



  /**
   * Count Type HarmonyCountOutputType
   */

  export type HarmonyCountOutputType = {
    Wine: number
  }

  export type HarmonyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | HarmonyCountOutputTypeCountWineArgs
  }

  // Custom InputTypes

  /**
   * HarmonyCountOutputType without action
   */
  export type HarmonyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HarmonyCountOutputType
     */
    select?: HarmonyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HarmonyCountOutputType without action
   */
  export type HarmonyCountOutputTypeCountWineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }



  /**
   * Count Type WineCountOutputType
   */

  export type WineCountOutputType = {
    review: number
  }

  export type WineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    review?: boolean | WineCountOutputTypeCountReviewArgs
  }

  // Custom InputTypes

  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineCountOutputType
     */
    select?: WineCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    telephone: string | null
    password: string | null
    address: string | null
    isAdm: boolean | null
    birthday: Date | null
    gender: string | null
    img: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    telephone: string | null
    password: string | null
    address: string | null
    isAdm: boolean | null
    birthday: Date | null
    gender: string | null
    img: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    telephone: number
    password: number
    address: number
    isAdm: number
    birthday: number
    gender: number
    img: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    telephone?: true
    password?: true
    address?: true
    isAdm?: true
    birthday?: true
    gender?: true
    img?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    telephone?: true
    password?: true
    address?: true
    isAdm?: true
    birthday?: true
    gender?: true
    img?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    telephone?: true
    password?: true
    address?: true
    isAdm?: true
    birthday?: true
    gender?: true
    img?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm: boolean
    birthday: Date
    gender: string
    img: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    address?: boolean
    isAdm?: boolean
    birthday?: boolean
    gender?: boolean
    img?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Shopping?: boolean | User$ShoppingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    address?: boolean
    isAdm?: boolean
    birthday?: boolean
    gender?: boolean
    img?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | User$ReviewArgs<ExtArgs>
    Shopping?: boolean | User$ShoppingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>[]
      Shopping: Prisma.$ShoppingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      telephone: string
      password: string
      address: string
      isAdm: boolean
      birthday: Date
      gender: string
      img: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends User$ReviewArgs<ExtArgs> = {}>(args?: Subset<T, User$ReviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    Shopping<T extends User$ShoppingArgs<ExtArgs> = {}>(args?: Subset<T, User$ShoppingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly telephone: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly isAdm: FieldRef<"User", 'Boolean'>
    readonly birthday: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'String'>
    readonly img: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Review
   */
  export type User$ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * User.Shopping
   */
  export type User$ShoppingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    where?: ShoppingWhereInput
    orderBy?: ShoppingOrderByWithRelationInput | ShoppingOrderByWithRelationInput[]
    cursor?: ShoppingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingScalarFieldEnum | ShoppingScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    wineId: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    userId: number | null
    wineId: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    review: string | null
    wineId: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    review: string | null
    wineId: number | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    review: number
    wineId: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    userId?: true
    wineId?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    userId?: true
    wineId?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    review?: true
    wineId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    review?: true
    wineId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    review?: true
    wineId?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    userId: number
    review: string
    wineId: number | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    review?: boolean
    wineId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Wine?: boolean | Review$WineArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    review?: boolean
    wineId?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Wine?: boolean | Review$WineArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Wine: Prisma.$WinePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      userId: number
      review: string
      wineId: number | null
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Wine<T extends Review$WineArgs<ExtArgs> = {}>(args?: Subset<T, Review$WineArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
    readonly userId: FieldRef<"Review", 'Int'>
    readonly review: FieldRef<"Review", 'String'>
    readonly wineId: FieldRef<"Review", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review.Wine
   */
  export type Review$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
  }



  /**
   * Model Shopping
   */

  export type AggregateShopping = {
    _count: ShoppingCountAggregateOutputType | null
    _avg: ShoppingAvgAggregateOutputType | null
    _sum: ShoppingSumAggregateOutputType | null
    _min: ShoppingMinAggregateOutputType | null
    _max: ShoppingMaxAggregateOutputType | null
  }

  export type ShoppingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShoppingSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ShoppingMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    shopping: string | null
    userId: number | null
  }

  export type ShoppingMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    shopping: string | null
    userId: number | null
  }

  export type ShoppingCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    shopping: number
    userId: number
    _all: number
  }


  export type ShoppingAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShoppingSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ShoppingMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    shopping?: true
    userId?: true
  }

  export type ShoppingMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    shopping?: true
    userId?: true
  }

  export type ShoppingCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    shopping?: true
    userId?: true
    _all?: true
  }

  export type ShoppingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shopping to aggregate.
     */
    where?: ShoppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shoppings to fetch.
     */
    orderBy?: ShoppingOrderByWithRelationInput | ShoppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shoppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shoppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shoppings
    **/
    _count?: true | ShoppingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShoppingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShoppingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingMaxAggregateInputType
  }

  export type GetShoppingAggregateType<T extends ShoppingAggregateArgs> = {
        [P in keyof T & keyof AggregateShopping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopping[P]>
      : GetScalarType<T[P], AggregateShopping[P]>
  }




  export type ShoppingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingWhereInput
    orderBy?: ShoppingOrderByWithAggregationInput | ShoppingOrderByWithAggregationInput[]
    by: ShoppingScalarFieldEnum[] | ShoppingScalarFieldEnum
    having?: ShoppingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingCountAggregateInputType | true
    _avg?: ShoppingAvgAggregateInputType
    _sum?: ShoppingSumAggregateInputType
    _min?: ShoppingMinAggregateInputType
    _max?: ShoppingMaxAggregateInputType
  }

  export type ShoppingGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    shopping: string
    userId: number
    _count: ShoppingCountAggregateOutputType | null
    _avg: ShoppingAvgAggregateOutputType | null
    _sum: ShoppingSumAggregateOutputType | null
    _min: ShoppingMinAggregateOutputType | null
    _max: ShoppingMaxAggregateOutputType | null
  }

  type GetShoppingGroupByPayload<T extends ShoppingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shopping?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Wine?: boolean | Shopping$WineArgs<ExtArgs>
    _count?: boolean | ShoppingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shopping"]>

  export type ShoppingSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shopping?: boolean
    userId?: boolean
  }

  export type ShoppingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Wine?: boolean | Shopping$WineArgs<ExtArgs>
    _count?: boolean | ShoppingCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ShoppingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shopping"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Wine: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      shopping: string
      userId: number
    }, ExtArgs["result"]["shopping"]>
    composites: {}
  }


  type ShoppingGetPayload<S extends boolean | null | undefined | ShoppingDefaultArgs> = $Result.GetResult<Prisma.$ShoppingPayload, S>

  type ShoppingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShoppingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShoppingCountAggregateInputType | true
    }

  export interface ShoppingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shopping'], meta: { name: 'Shopping' } }
    /**
     * Find zero or one Shopping that matches the filter.
     * @param {ShoppingFindUniqueArgs} args - Arguments to find a Shopping
     * @example
     * // Get one Shopping
     * const shopping = await prisma.shopping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShoppingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingFindUniqueArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Shopping that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShoppingFindUniqueOrThrowArgs} args - Arguments to find a Shopping
     * @example
     * // Get one Shopping
     * const shopping = await prisma.shopping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShoppingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShoppingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Shopping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingFindFirstArgs} args - Arguments to find a Shopping
     * @example
     * // Get one Shopping
     * const shopping = await prisma.shopping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShoppingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ShoppingFindFirstArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Shopping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingFindFirstOrThrowArgs} args - Arguments to find a Shopping
     * @example
     * // Get one Shopping
     * const shopping = await prisma.shopping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShoppingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ShoppingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Shoppings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shoppings
     * const shoppings = await prisma.shopping.findMany()
     * 
     * // Get first 10 Shoppings
     * const shoppings = await prisma.shopping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingWithIdOnly = await prisma.shopping.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShoppingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShoppingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Shopping.
     * @param {ShoppingCreateArgs} args - Arguments to create a Shopping.
     * @example
     * // Create one Shopping
     * const Shopping = await prisma.shopping.create({
     *   data: {
     *     // ... data to create a Shopping
     *   }
     * })
     * 
    **/
    create<T extends ShoppingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingCreateArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Shopping.
     * @param {ShoppingDeleteArgs} args - Arguments to delete one Shopping.
     * @example
     * // Delete one Shopping
     * const Shopping = await prisma.shopping.delete({
     *   where: {
     *     // ... filter to delete one Shopping
     *   }
     * })
     * 
    **/
    delete<T extends ShoppingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingDeleteArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Shopping.
     * @param {ShoppingUpdateArgs} args - Arguments to update one Shopping.
     * @example
     * // Update one Shopping
     * const shopping = await prisma.shopping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShoppingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingUpdateArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Shoppings.
     * @param {ShoppingDeleteManyArgs} args - Arguments to filter Shoppings to delete.
     * @example
     * // Delete a few Shoppings
     * const { count } = await prisma.shopping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShoppingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ShoppingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shoppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shoppings
     * const shopping = await prisma.shopping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShoppingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shopping.
     * @param {ShoppingUpsertArgs} args - Arguments to update or create a Shopping.
     * @example
     * // Update or create a Shopping
     * const shopping = await prisma.shopping.upsert({
     *   create: {
     *     // ... data to create a Shopping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shopping we want to update
     *   }
     * })
    **/
    upsert<T extends ShoppingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ShoppingUpsertArgs<ExtArgs>>
    ): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Shoppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCountArgs} args - Arguments to filter Shoppings to count.
     * @example
     * // Count the number of Shoppings
     * const count = await prisma.shopping.count({
     *   where: {
     *     // ... the filter for the Shoppings we want to count
     *   }
     * })
    **/
    count<T extends ShoppingCountArgs>(
      args?: Subset<T, ShoppingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shopping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingAggregateArgs>(args: Subset<T, ShoppingAggregateArgs>): Prisma.PrismaPromise<GetShoppingAggregateType<T>>

    /**
     * Group by Shopping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shopping model
   */
  readonly fields: ShoppingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shopping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Wine<T extends Shopping$WineArgs<ExtArgs> = {}>(args?: Subset<T, Shopping$WineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Shopping model
   */ 
  interface ShoppingFieldRefs {
    readonly id: FieldRef<"Shopping", 'Int'>
    readonly createdAt: FieldRef<"Shopping", 'DateTime'>
    readonly updatedAt: FieldRef<"Shopping", 'DateTime'>
    readonly shopping: FieldRef<"Shopping", 'String'>
    readonly userId: FieldRef<"Shopping", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Shopping findUnique
   */
  export type ShoppingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter, which Shopping to fetch.
     */
    where: ShoppingWhereUniqueInput
  }


  /**
   * Shopping findUniqueOrThrow
   */
  export type ShoppingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter, which Shopping to fetch.
     */
    where: ShoppingWhereUniqueInput
  }


  /**
   * Shopping findFirst
   */
  export type ShoppingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter, which Shopping to fetch.
     */
    where?: ShoppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shoppings to fetch.
     */
    orderBy?: ShoppingOrderByWithRelationInput | ShoppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shoppings.
     */
    cursor?: ShoppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shoppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shoppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shoppings.
     */
    distinct?: ShoppingScalarFieldEnum | ShoppingScalarFieldEnum[]
  }


  /**
   * Shopping findFirstOrThrow
   */
  export type ShoppingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter, which Shopping to fetch.
     */
    where?: ShoppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shoppings to fetch.
     */
    orderBy?: ShoppingOrderByWithRelationInput | ShoppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shoppings.
     */
    cursor?: ShoppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shoppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shoppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shoppings.
     */
    distinct?: ShoppingScalarFieldEnum | ShoppingScalarFieldEnum[]
  }


  /**
   * Shopping findMany
   */
  export type ShoppingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter, which Shoppings to fetch.
     */
    where?: ShoppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shoppings to fetch.
     */
    orderBy?: ShoppingOrderByWithRelationInput | ShoppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shoppings.
     */
    cursor?: ShoppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shoppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shoppings.
     */
    skip?: number
    distinct?: ShoppingScalarFieldEnum | ShoppingScalarFieldEnum[]
  }


  /**
   * Shopping create
   */
  export type ShoppingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * The data needed to create a Shopping.
     */
    data: XOR<ShoppingCreateInput, ShoppingUncheckedCreateInput>
  }


  /**
   * Shopping update
   */
  export type ShoppingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * The data needed to update a Shopping.
     */
    data: XOR<ShoppingUpdateInput, ShoppingUncheckedUpdateInput>
    /**
     * Choose, which Shopping to update.
     */
    where: ShoppingWhereUniqueInput
  }


  /**
   * Shopping updateMany
   */
  export type ShoppingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shoppings.
     */
    data: XOR<ShoppingUpdateManyMutationInput, ShoppingUncheckedUpdateManyInput>
    /**
     * Filter which Shoppings to update
     */
    where?: ShoppingWhereInput
  }


  /**
   * Shopping upsert
   */
  export type ShoppingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * The filter to search for the Shopping to update in case it exists.
     */
    where: ShoppingWhereUniqueInput
    /**
     * In case the Shopping found by the `where` argument doesn't exist, create a new Shopping with this data.
     */
    create: XOR<ShoppingCreateInput, ShoppingUncheckedCreateInput>
    /**
     * In case the Shopping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingUpdateInput, ShoppingUncheckedUpdateInput>
  }


  /**
   * Shopping delete
   */
  export type ShoppingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    /**
     * Filter which Shopping to delete.
     */
    where: ShoppingWhereUniqueInput
  }


  /**
   * Shopping deleteMany
   */
  export type ShoppingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shoppings to delete
     */
    where?: ShoppingWhereInput
  }


  /**
   * Shopping.Wine
   */
  export type Shopping$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Shopping without action
   */
  export type ShoppingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
  }



  /**
   * Model Type
   */

  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeSumAggregateOutputType = {
    id: number | null
  }

  export type TypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    id?: true
  }

  export type TypeSumAggregateInputType = {
    id?: true
  }

  export type TypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type TypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypeWhereInput
    orderBy?: TypeOrderByWithAggregationInput | TypeOrderByWithAggregationInput[]
    by: TypeScalarFieldEnum[] | TypeScalarFieldEnum
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }

  export type TypeGroupByOutputType = {
    id: number
    type: string
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    Wine?: boolean | Type$WineArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["type"]>

  export type TypeSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type TypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | Type$WineArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Type"
    objects: {
      Wine: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["type"]>
    composites: {}
  }


  type TypeGetPayload<S extends boolean | null | undefined | TypeDefaultArgs> = $Result.GetResult<Prisma.$TypePayload, S>

  type TypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Type'], meta: { name: 'Type' } }
    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TypeFindUniqueArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeCreateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TypeDeleteArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpsertArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Type model
   */
  readonly fields: TypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Wine<T extends Type$WineArgs<ExtArgs> = {}>(args?: Subset<T, Type$WineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Type model
   */ 
  interface TypeFieldRefs {
    readonly id: FieldRef<"Type", 'Int'>
    readonly type: FieldRef<"Type", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Type findUnique
   */
  export type TypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findFirst
   */
  export type TypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type create
   */
  export type TypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.Wine
   */
  export type Type$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Type without action
   */
  export type TypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
  }



  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    country: string | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    country: string | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    country: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    country?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    country?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    country?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    country: string
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    Wine?: boolean | Country$WineArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    country?: boolean
  }

  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | Country$WineArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      Wine: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      country: string
    }, ExtArgs["result"]["country"]>
    composites: {}
  }


  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Country that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends CountryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryCreateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends CountryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends CountryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Wine<T extends Country$WineArgs<ExtArgs> = {}>(args?: Subset<T, Country$WineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly country: FieldRef<"Country", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }


  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }


  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }


  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }


  /**
   * Country.Wine
   */
  export type Country$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
  }



  /**
   * Model Grape
   */

  export type AggregateGrape = {
    _count: GrapeCountAggregateOutputType | null
    _avg: GrapeAvgAggregateOutputType | null
    _sum: GrapeSumAggregateOutputType | null
    _min: GrapeMinAggregateOutputType | null
    _max: GrapeMaxAggregateOutputType | null
  }

  export type GrapeAvgAggregateOutputType = {
    id: number | null
  }

  export type GrapeSumAggregateOutputType = {
    id: number | null
  }

  export type GrapeMinAggregateOutputType = {
    id: number | null
    grape: string | null
  }

  export type GrapeMaxAggregateOutputType = {
    id: number | null
    grape: string | null
  }

  export type GrapeCountAggregateOutputType = {
    id: number
    grape: number
    _all: number
  }


  export type GrapeAvgAggregateInputType = {
    id?: true
  }

  export type GrapeSumAggregateInputType = {
    id?: true
  }

  export type GrapeMinAggregateInputType = {
    id?: true
    grape?: true
  }

  export type GrapeMaxAggregateInputType = {
    id?: true
    grape?: true
  }

  export type GrapeCountAggregateInputType = {
    id?: true
    grape?: true
    _all?: true
  }

  export type GrapeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grape to aggregate.
     */
    where?: GrapeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grapes to fetch.
     */
    orderBy?: GrapeOrderByWithRelationInput | GrapeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrapeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grapes
    **/
    _count?: true | GrapeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrapeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrapeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrapeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrapeMaxAggregateInputType
  }

  export type GetGrapeAggregateType<T extends GrapeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrape]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrape[P]>
      : GetScalarType<T[P], AggregateGrape[P]>
  }




  export type GrapeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrapeWhereInput
    orderBy?: GrapeOrderByWithAggregationInput | GrapeOrderByWithAggregationInput[]
    by: GrapeScalarFieldEnum[] | GrapeScalarFieldEnum
    having?: GrapeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrapeCountAggregateInputType | true
    _avg?: GrapeAvgAggregateInputType
    _sum?: GrapeSumAggregateInputType
    _min?: GrapeMinAggregateInputType
    _max?: GrapeMaxAggregateInputType
  }

  export type GrapeGroupByOutputType = {
    id: number
    grape: string
    _count: GrapeCountAggregateOutputType | null
    _avg: GrapeAvgAggregateOutputType | null
    _sum: GrapeSumAggregateOutputType | null
    _min: GrapeMinAggregateOutputType | null
    _max: GrapeMaxAggregateOutputType | null
  }

  type GetGrapeGroupByPayload<T extends GrapeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrapeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrapeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrapeGroupByOutputType[P]>
            : GetScalarType<T[P], GrapeGroupByOutputType[P]>
        }
      >
    >


  export type GrapeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    grape?: boolean
    Wine?: boolean | Grape$WineArgs<ExtArgs>
    _count?: boolean | GrapeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grape"]>

  export type GrapeSelectScalar = {
    id?: boolean
    grape?: boolean
  }

  export type GrapeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | Grape$WineArgs<ExtArgs>
    _count?: boolean | GrapeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GrapePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grape"
    objects: {
      Wine: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      grape: string
    }, ExtArgs["result"]["grape"]>
    composites: {}
  }


  type GrapeGetPayload<S extends boolean | null | undefined | GrapeDefaultArgs> = $Result.GetResult<Prisma.$GrapePayload, S>

  type GrapeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrapeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrapeCountAggregateInputType | true
    }

  export interface GrapeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grape'], meta: { name: 'Grape' } }
    /**
     * Find zero or one Grape that matches the filter.
     * @param {GrapeFindUniqueArgs} args - Arguments to find a Grape
     * @example
     * // Get one Grape
     * const grape = await prisma.grape.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GrapeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeFindUniqueArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Grape that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GrapeFindUniqueOrThrowArgs} args - Arguments to find a Grape
     * @example
     * // Get one Grape
     * const grape = await prisma.grape.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GrapeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrapeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Grape that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeFindFirstArgs} args - Arguments to find a Grape
     * @example
     * // Get one Grape
     * const grape = await prisma.grape.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GrapeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GrapeFindFirstArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Grape that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeFindFirstOrThrowArgs} args - Arguments to find a Grape
     * @example
     * // Get one Grape
     * const grape = await prisma.grape.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GrapeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrapeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Grapes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grapes
     * const grapes = await prisma.grape.findMany()
     * 
     * // Get first 10 Grapes
     * const grapes = await prisma.grape.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grapeWithIdOnly = await prisma.grape.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GrapeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrapeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Grape.
     * @param {GrapeCreateArgs} args - Arguments to create a Grape.
     * @example
     * // Create one Grape
     * const Grape = await prisma.grape.create({
     *   data: {
     *     // ... data to create a Grape
     *   }
     * })
     * 
    **/
    create<T extends GrapeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeCreateArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Grape.
     * @param {GrapeDeleteArgs} args - Arguments to delete one Grape.
     * @example
     * // Delete one Grape
     * const Grape = await prisma.grape.delete({
     *   where: {
     *     // ... filter to delete one Grape
     *   }
     * })
     * 
    **/
    delete<T extends GrapeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeDeleteArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Grape.
     * @param {GrapeUpdateArgs} args - Arguments to update one Grape.
     * @example
     * // Update one Grape
     * const grape = await prisma.grape.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GrapeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeUpdateArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Grapes.
     * @param {GrapeDeleteManyArgs} args - Arguments to filter Grapes to delete.
     * @example
     * // Delete a few Grapes
     * const { count } = await prisma.grape.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GrapeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrapeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grapes
     * const grape = await prisma.grape.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GrapeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grape.
     * @param {GrapeUpsertArgs} args - Arguments to update or create a Grape.
     * @example
     * // Update or create a Grape
     * const grape = await prisma.grape.upsert({
     *   create: {
     *     // ... data to create a Grape
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grape we want to update
     *   }
     * })
    **/
    upsert<T extends GrapeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GrapeUpsertArgs<ExtArgs>>
    ): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Grapes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeCountArgs} args - Arguments to filter Grapes to count.
     * @example
     * // Count the number of Grapes
     * const count = await prisma.grape.count({
     *   where: {
     *     // ... the filter for the Grapes we want to count
     *   }
     * })
    **/
    count<T extends GrapeCountArgs>(
      args?: Subset<T, GrapeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrapeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grape.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrapeAggregateArgs>(args: Subset<T, GrapeAggregateArgs>): Prisma.PrismaPromise<GetGrapeAggregateType<T>>

    /**
     * Group by Grape.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrapeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrapeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrapeGroupByArgs['orderBy'] }
        : { orderBy?: GrapeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrapeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrapeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grape model
   */
  readonly fields: GrapeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grape.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrapeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Wine<T extends Grape$WineArgs<ExtArgs> = {}>(args?: Subset<T, Grape$WineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Grape model
   */ 
  interface GrapeFieldRefs {
    readonly id: FieldRef<"Grape", 'Int'>
    readonly grape: FieldRef<"Grape", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Grape findUnique
   */
  export type GrapeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter, which Grape to fetch.
     */
    where: GrapeWhereUniqueInput
  }


  /**
   * Grape findUniqueOrThrow
   */
  export type GrapeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter, which Grape to fetch.
     */
    where: GrapeWhereUniqueInput
  }


  /**
   * Grape findFirst
   */
  export type GrapeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter, which Grape to fetch.
     */
    where?: GrapeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grapes to fetch.
     */
    orderBy?: GrapeOrderByWithRelationInput | GrapeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grapes.
     */
    cursor?: GrapeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grapes.
     */
    distinct?: GrapeScalarFieldEnum | GrapeScalarFieldEnum[]
  }


  /**
   * Grape findFirstOrThrow
   */
  export type GrapeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter, which Grape to fetch.
     */
    where?: GrapeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grapes to fetch.
     */
    orderBy?: GrapeOrderByWithRelationInput | GrapeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grapes.
     */
    cursor?: GrapeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grapes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grapes.
     */
    distinct?: GrapeScalarFieldEnum | GrapeScalarFieldEnum[]
  }


  /**
   * Grape findMany
   */
  export type GrapeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter, which Grapes to fetch.
     */
    where?: GrapeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grapes to fetch.
     */
    orderBy?: GrapeOrderByWithRelationInput | GrapeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grapes.
     */
    cursor?: GrapeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grapes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grapes.
     */
    skip?: number
    distinct?: GrapeScalarFieldEnum | GrapeScalarFieldEnum[]
  }


  /**
   * Grape create
   */
  export type GrapeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grape.
     */
    data: XOR<GrapeCreateInput, GrapeUncheckedCreateInput>
  }


  /**
   * Grape update
   */
  export type GrapeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grape.
     */
    data: XOR<GrapeUpdateInput, GrapeUncheckedUpdateInput>
    /**
     * Choose, which Grape to update.
     */
    where: GrapeWhereUniqueInput
  }


  /**
   * Grape updateMany
   */
  export type GrapeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grapes.
     */
    data: XOR<GrapeUpdateManyMutationInput, GrapeUncheckedUpdateManyInput>
    /**
     * Filter which Grapes to update
     */
    where?: GrapeWhereInput
  }


  /**
   * Grape upsert
   */
  export type GrapeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grape to update in case it exists.
     */
    where: GrapeWhereUniqueInput
    /**
     * In case the Grape found by the `where` argument doesn't exist, create a new Grape with this data.
     */
    create: XOR<GrapeCreateInput, GrapeUncheckedCreateInput>
    /**
     * In case the Grape was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrapeUpdateInput, GrapeUncheckedUpdateInput>
  }


  /**
   * Grape delete
   */
  export type GrapeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
    /**
     * Filter which Grape to delete.
     */
    where: GrapeWhereUniqueInput
  }


  /**
   * Grape deleteMany
   */
  export type GrapeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grapes to delete
     */
    where?: GrapeWhereInput
  }


  /**
   * Grape.Wine
   */
  export type Grape$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Grape without action
   */
  export type GrapeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grape
     */
    select?: GrapeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrapeInclude<ExtArgs> | null
  }



  /**
   * Model Harmony
   */

  export type AggregateHarmony = {
    _count: HarmonyCountAggregateOutputType | null
    _avg: HarmonyAvgAggregateOutputType | null
    _sum: HarmonySumAggregateOutputType | null
    _min: HarmonyMinAggregateOutputType | null
    _max: HarmonyMaxAggregateOutputType | null
  }

  export type HarmonyAvgAggregateOutputType = {
    id: number | null
  }

  export type HarmonySumAggregateOutputType = {
    id: number | null
  }

  export type HarmonyMinAggregateOutputType = {
    id: number | null
    harmony: string | null
  }

  export type HarmonyMaxAggregateOutputType = {
    id: number | null
    harmony: string | null
  }

  export type HarmonyCountAggregateOutputType = {
    id: number
    harmony: number
    _all: number
  }


  export type HarmonyAvgAggregateInputType = {
    id?: true
  }

  export type HarmonySumAggregateInputType = {
    id?: true
  }

  export type HarmonyMinAggregateInputType = {
    id?: true
    harmony?: true
  }

  export type HarmonyMaxAggregateInputType = {
    id?: true
    harmony?: true
  }

  export type HarmonyCountAggregateInputType = {
    id?: true
    harmony?: true
    _all?: true
  }

  export type HarmonyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Harmony to aggregate.
     */
    where?: HarmonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Harmonies to fetch.
     */
    orderBy?: HarmonyOrderByWithRelationInput | HarmonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HarmonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Harmonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Harmonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Harmonies
    **/
    _count?: true | HarmonyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HarmonyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HarmonySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HarmonyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HarmonyMaxAggregateInputType
  }

  export type GetHarmonyAggregateType<T extends HarmonyAggregateArgs> = {
        [P in keyof T & keyof AggregateHarmony]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHarmony[P]>
      : GetScalarType<T[P], AggregateHarmony[P]>
  }




  export type HarmonyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HarmonyWhereInput
    orderBy?: HarmonyOrderByWithAggregationInput | HarmonyOrderByWithAggregationInput[]
    by: HarmonyScalarFieldEnum[] | HarmonyScalarFieldEnum
    having?: HarmonyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HarmonyCountAggregateInputType | true
    _avg?: HarmonyAvgAggregateInputType
    _sum?: HarmonySumAggregateInputType
    _min?: HarmonyMinAggregateInputType
    _max?: HarmonyMaxAggregateInputType
  }

  export type HarmonyGroupByOutputType = {
    id: number
    harmony: string
    _count: HarmonyCountAggregateOutputType | null
    _avg: HarmonyAvgAggregateOutputType | null
    _sum: HarmonySumAggregateOutputType | null
    _min: HarmonyMinAggregateOutputType | null
    _max: HarmonyMaxAggregateOutputType | null
  }

  type GetHarmonyGroupByPayload<T extends HarmonyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HarmonyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HarmonyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HarmonyGroupByOutputType[P]>
            : GetScalarType<T[P], HarmonyGroupByOutputType[P]>
        }
      >
    >


  export type HarmonySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    harmony?: boolean
    Wine?: boolean | Harmony$WineArgs<ExtArgs>
    _count?: boolean | HarmonyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["harmony"]>

  export type HarmonySelectScalar = {
    id?: boolean
    harmony?: boolean
  }

  export type HarmonyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wine?: boolean | Harmony$WineArgs<ExtArgs>
    _count?: boolean | HarmonyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HarmonyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Harmony"
    objects: {
      Wine: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      harmony: string
    }, ExtArgs["result"]["harmony"]>
    composites: {}
  }


  type HarmonyGetPayload<S extends boolean | null | undefined | HarmonyDefaultArgs> = $Result.GetResult<Prisma.$HarmonyPayload, S>

  type HarmonyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HarmonyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HarmonyCountAggregateInputType | true
    }

  export interface HarmonyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Harmony'], meta: { name: 'Harmony' } }
    /**
     * Find zero or one Harmony that matches the filter.
     * @param {HarmonyFindUniqueArgs} args - Arguments to find a Harmony
     * @example
     * // Get one Harmony
     * const harmony = await prisma.harmony.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HarmonyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyFindUniqueArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Harmony that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HarmonyFindUniqueOrThrowArgs} args - Arguments to find a Harmony
     * @example
     * // Get one Harmony
     * const harmony = await prisma.harmony.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HarmonyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HarmonyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Harmony that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyFindFirstArgs} args - Arguments to find a Harmony
     * @example
     * // Get one Harmony
     * const harmony = await prisma.harmony.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HarmonyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HarmonyFindFirstArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Harmony that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyFindFirstOrThrowArgs} args - Arguments to find a Harmony
     * @example
     * // Get one Harmony
     * const harmony = await prisma.harmony.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HarmonyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HarmonyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Harmonies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Harmonies
     * const harmonies = await prisma.harmony.findMany()
     * 
     * // Get first 10 Harmonies
     * const harmonies = await prisma.harmony.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const harmonyWithIdOnly = await prisma.harmony.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HarmonyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HarmonyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Harmony.
     * @param {HarmonyCreateArgs} args - Arguments to create a Harmony.
     * @example
     * // Create one Harmony
     * const Harmony = await prisma.harmony.create({
     *   data: {
     *     // ... data to create a Harmony
     *   }
     * })
     * 
    **/
    create<T extends HarmonyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyCreateArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Harmony.
     * @param {HarmonyDeleteArgs} args - Arguments to delete one Harmony.
     * @example
     * // Delete one Harmony
     * const Harmony = await prisma.harmony.delete({
     *   where: {
     *     // ... filter to delete one Harmony
     *   }
     * })
     * 
    **/
    delete<T extends HarmonyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyDeleteArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Harmony.
     * @param {HarmonyUpdateArgs} args - Arguments to update one Harmony.
     * @example
     * // Update one Harmony
     * const harmony = await prisma.harmony.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HarmonyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyUpdateArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Harmonies.
     * @param {HarmonyDeleteManyArgs} args - Arguments to filter Harmonies to delete.
     * @example
     * // Delete a few Harmonies
     * const { count } = await prisma.harmony.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HarmonyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HarmonyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Harmonies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Harmonies
     * const harmony = await prisma.harmony.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HarmonyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Harmony.
     * @param {HarmonyUpsertArgs} args - Arguments to update or create a Harmony.
     * @example
     * // Update or create a Harmony
     * const harmony = await prisma.harmony.upsert({
     *   create: {
     *     // ... data to create a Harmony
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Harmony we want to update
     *   }
     * })
    **/
    upsert<T extends HarmonyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HarmonyUpsertArgs<ExtArgs>>
    ): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Harmonies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyCountArgs} args - Arguments to filter Harmonies to count.
     * @example
     * // Count the number of Harmonies
     * const count = await prisma.harmony.count({
     *   where: {
     *     // ... the filter for the Harmonies we want to count
     *   }
     * })
    **/
    count<T extends HarmonyCountArgs>(
      args?: Subset<T, HarmonyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HarmonyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Harmony.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HarmonyAggregateArgs>(args: Subset<T, HarmonyAggregateArgs>): Prisma.PrismaPromise<GetHarmonyAggregateType<T>>

    /**
     * Group by Harmony.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HarmonyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HarmonyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HarmonyGroupByArgs['orderBy'] }
        : { orderBy?: HarmonyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HarmonyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHarmonyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Harmony model
   */
  readonly fields: HarmonyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Harmony.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HarmonyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Wine<T extends Harmony$WineArgs<ExtArgs> = {}>(args?: Subset<T, Harmony$WineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Harmony model
   */ 
  interface HarmonyFieldRefs {
    readonly id: FieldRef<"Harmony", 'Int'>
    readonly harmony: FieldRef<"Harmony", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Harmony findUnique
   */
  export type HarmonyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter, which Harmony to fetch.
     */
    where: HarmonyWhereUniqueInput
  }


  /**
   * Harmony findUniqueOrThrow
   */
  export type HarmonyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter, which Harmony to fetch.
     */
    where: HarmonyWhereUniqueInput
  }


  /**
   * Harmony findFirst
   */
  export type HarmonyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter, which Harmony to fetch.
     */
    where?: HarmonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Harmonies to fetch.
     */
    orderBy?: HarmonyOrderByWithRelationInput | HarmonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Harmonies.
     */
    cursor?: HarmonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Harmonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Harmonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Harmonies.
     */
    distinct?: HarmonyScalarFieldEnum | HarmonyScalarFieldEnum[]
  }


  /**
   * Harmony findFirstOrThrow
   */
  export type HarmonyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter, which Harmony to fetch.
     */
    where?: HarmonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Harmonies to fetch.
     */
    orderBy?: HarmonyOrderByWithRelationInput | HarmonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Harmonies.
     */
    cursor?: HarmonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Harmonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Harmonies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Harmonies.
     */
    distinct?: HarmonyScalarFieldEnum | HarmonyScalarFieldEnum[]
  }


  /**
   * Harmony findMany
   */
  export type HarmonyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter, which Harmonies to fetch.
     */
    where?: HarmonyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Harmonies to fetch.
     */
    orderBy?: HarmonyOrderByWithRelationInput | HarmonyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Harmonies.
     */
    cursor?: HarmonyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Harmonies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Harmonies.
     */
    skip?: number
    distinct?: HarmonyScalarFieldEnum | HarmonyScalarFieldEnum[]
  }


  /**
   * Harmony create
   */
  export type HarmonyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * The data needed to create a Harmony.
     */
    data: XOR<HarmonyCreateInput, HarmonyUncheckedCreateInput>
  }


  /**
   * Harmony update
   */
  export type HarmonyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * The data needed to update a Harmony.
     */
    data: XOR<HarmonyUpdateInput, HarmonyUncheckedUpdateInput>
    /**
     * Choose, which Harmony to update.
     */
    where: HarmonyWhereUniqueInput
  }


  /**
   * Harmony updateMany
   */
  export type HarmonyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Harmonies.
     */
    data: XOR<HarmonyUpdateManyMutationInput, HarmonyUncheckedUpdateManyInput>
    /**
     * Filter which Harmonies to update
     */
    where?: HarmonyWhereInput
  }


  /**
   * Harmony upsert
   */
  export type HarmonyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * The filter to search for the Harmony to update in case it exists.
     */
    where: HarmonyWhereUniqueInput
    /**
     * In case the Harmony found by the `where` argument doesn't exist, create a new Harmony with this data.
     */
    create: XOR<HarmonyCreateInput, HarmonyUncheckedCreateInput>
    /**
     * In case the Harmony was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HarmonyUpdateInput, HarmonyUncheckedUpdateInput>
  }


  /**
   * Harmony delete
   */
  export type HarmonyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
    /**
     * Filter which Harmony to delete.
     */
    where: HarmonyWhereUniqueInput
  }


  /**
   * Harmony deleteMany
   */
  export type HarmonyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Harmonies to delete
     */
    where?: HarmonyWhereInput
  }


  /**
   * Harmony.Wine
   */
  export type Harmony$WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Harmony without action
   */
  export type HarmonyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Harmony
     */
    select?: HarmonySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HarmonyInclude<ExtArgs> | null
  }



  /**
   * Model Wine
   */

  export type AggregateWine = {
    _count: WineCountAggregateOutputType | null
    _avg: WineAvgAggregateOutputType | null
    _sum: WineSumAggregateOutputType | null
    _min: WineMinAggregateOutputType | null
    _max: WineMaxAggregateOutputType | null
  }

  export type WineAvgAggregateOutputType = {
    id: number | null
    price: number | null
    quantity: number | null
    year: number | null
    alchoolic: number | null
    typeId: number | null
    countryId: number | null
    grapeId: number | null
    harmonyId: number | null
    shoppingId: number | null
  }

  export type WineSumAggregateOutputType = {
    id: number | null
    price: number | null
    quantity: number | null
    year: number | null
    alchoolic: number | null
    typeId: number | null
    countryId: number | null
    grapeId: number | null
    harmonyId: number | null
    shoppingId: number | null
  }

  export type WineMinAggregateOutputType = {
    id: number | null
    label: string | null
    price: number | null
    quantity: number | null
    vinicula: string | null
    year: number | null
    alchoolic: number | null
    description: string | null
    img: string | null
    typeId: number | null
    countryId: number | null
    grapeId: number | null
    harmonyId: number | null
    shoppingId: number | null
  }

  export type WineMaxAggregateOutputType = {
    id: number | null
    label: string | null
    price: number | null
    quantity: number | null
    vinicula: string | null
    year: number | null
    alchoolic: number | null
    description: string | null
    img: string | null
    typeId: number | null
    countryId: number | null
    grapeId: number | null
    harmonyId: number | null
    shoppingId: number | null
  }

  export type WineCountAggregateOutputType = {
    id: number
    label: number
    price: number
    quantity: number
    vinicula: number
    year: number
    alchoolic: number
    description: number
    img: number
    typeId: number
    countryId: number
    grapeId: number
    harmonyId: number
    shoppingId: number
    _all: number
  }


  export type WineAvgAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    year?: true
    alchoolic?: true
    typeId?: true
    countryId?: true
    grapeId?: true
    harmonyId?: true
    shoppingId?: true
  }

  export type WineSumAggregateInputType = {
    id?: true
    price?: true
    quantity?: true
    year?: true
    alchoolic?: true
    typeId?: true
    countryId?: true
    grapeId?: true
    harmonyId?: true
    shoppingId?: true
  }

  export type WineMinAggregateInputType = {
    id?: true
    label?: true
    price?: true
    quantity?: true
    vinicula?: true
    year?: true
    alchoolic?: true
    description?: true
    img?: true
    typeId?: true
    countryId?: true
    grapeId?: true
    harmonyId?: true
    shoppingId?: true
  }

  export type WineMaxAggregateInputType = {
    id?: true
    label?: true
    price?: true
    quantity?: true
    vinicula?: true
    year?: true
    alchoolic?: true
    description?: true
    img?: true
    typeId?: true
    countryId?: true
    grapeId?: true
    harmonyId?: true
    shoppingId?: true
  }

  export type WineCountAggregateInputType = {
    id?: true
    label?: true
    price?: true
    quantity?: true
    vinicula?: true
    year?: true
    alchoolic?: true
    description?: true
    img?: true
    typeId?: true
    countryId?: true
    grapeId?: true
    harmonyId?: true
    shoppingId?: true
    _all?: true
  }

  export type WineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wine to aggregate.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wines
    **/
    _count?: true | WineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WineMaxAggregateInputType
  }

  export type GetWineAggregateType<T extends WineAggregateArgs> = {
        [P in keyof T & keyof AggregateWine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWine[P]>
      : GetScalarType<T[P], AggregateWine[P]>
  }




  export type WineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
    orderBy?: WineOrderByWithAggregationInput | WineOrderByWithAggregationInput[]
    by: WineScalarFieldEnum[] | WineScalarFieldEnum
    having?: WineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WineCountAggregateInputType | true
    _avg?: WineAvgAggregateInputType
    _sum?: WineSumAggregateInputType
    _min?: WineMinAggregateInputType
    _max?: WineMaxAggregateInputType
  }

  export type WineGroupByOutputType = {
    id: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    grapeId: number
    harmonyId: number
    shoppingId: number | null
    _count: WineCountAggregateOutputType | null
    _avg: WineAvgAggregateOutputType | null
    _sum: WineSumAggregateOutputType | null
    _min: WineMinAggregateOutputType | null
    _max: WineMaxAggregateOutputType | null
  }

  type GetWineGroupByPayload<T extends WineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WineGroupByOutputType[P]>
            : GetScalarType<T[P], WineGroupByOutputType[P]>
        }
      >
    >


  export type WineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    price?: boolean
    quantity?: boolean
    vinicula?: boolean
    year?: boolean
    alchoolic?: boolean
    description?: boolean
    img?: boolean
    typeId?: boolean
    countryId?: boolean
    grapeId?: boolean
    harmonyId?: boolean
    shoppingId?: boolean
    type?: boolean | TypeDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    grape?: boolean | GrapeDefaultArgs<ExtArgs>
    review?: boolean | Wine$reviewArgs<ExtArgs>
    harmony?: boolean | HarmonyDefaultArgs<ExtArgs>
    Shopping?: boolean | Wine$ShoppingArgs<ExtArgs>
    _count?: boolean | WineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wine"]>

  export type WineSelectScalar = {
    id?: boolean
    label?: boolean
    price?: boolean
    quantity?: boolean
    vinicula?: boolean
    year?: boolean
    alchoolic?: boolean
    description?: boolean
    img?: boolean
    typeId?: boolean
    countryId?: boolean
    grapeId?: boolean
    harmonyId?: boolean
    shoppingId?: boolean
  }

  export type WineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | TypeDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    grape?: boolean | GrapeDefaultArgs<ExtArgs>
    review?: boolean | Wine$reviewArgs<ExtArgs>
    harmony?: boolean | HarmonyDefaultArgs<ExtArgs>
    Shopping?: boolean | Wine$ShoppingArgs<ExtArgs>
    _count?: boolean | WineCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wine"
    objects: {
      type: Prisma.$TypePayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      grape: Prisma.$GrapePayload<ExtArgs>
      review: Prisma.$ReviewPayload<ExtArgs>[]
      harmony: Prisma.$HarmonyPayload<ExtArgs>
      Shopping: Prisma.$ShoppingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      label: string
      price: number
      quantity: number
      vinicula: string
      year: number
      alchoolic: number
      description: string
      img: string
      typeId: number
      countryId: number
      grapeId: number
      harmonyId: number
      shoppingId: number | null
    }, ExtArgs["result"]["wine"]>
    composites: {}
  }


  type WineGetPayload<S extends boolean | null | undefined | WineDefaultArgs> = $Result.GetResult<Prisma.$WinePayload, S>

  type WineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WineCountAggregateInputType | true
    }

  export interface WineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wine'], meta: { name: 'Wine' } }
    /**
     * Find zero or one Wine that matches the filter.
     * @param {WineFindUniqueArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WineFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WineFindUniqueArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Wine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WineFindUniqueOrThrowArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WineFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WineFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Wine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindFirstArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WineFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WineFindFirstArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Wine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindFirstOrThrowArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WineFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WineFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Wines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wines
     * const wines = await prisma.wine.findMany()
     * 
     * // Get first 10 Wines
     * const wines = await prisma.wine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wineWithIdOnly = await prisma.wine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WineFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WineFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Wine.
     * @param {WineCreateArgs} args - Arguments to create a Wine.
     * @example
     * // Create one Wine
     * const Wine = await prisma.wine.create({
     *   data: {
     *     // ... data to create a Wine
     *   }
     * })
     * 
    **/
    create<T extends WineCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WineCreateArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Wine.
     * @param {WineDeleteArgs} args - Arguments to delete one Wine.
     * @example
     * // Delete one Wine
     * const Wine = await prisma.wine.delete({
     *   where: {
     *     // ... filter to delete one Wine
     *   }
     * })
     * 
    **/
    delete<T extends WineDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WineDeleteArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Wine.
     * @param {WineUpdateArgs} args - Arguments to update one Wine.
     * @example
     * // Update one Wine
     * const wine = await prisma.wine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WineUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WineUpdateArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Wines.
     * @param {WineDeleteManyArgs} args - Arguments to filter Wines to delete.
     * @example
     * // Delete a few Wines
     * const { count } = await prisma.wine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WineDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WineDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wines
     * const wine = await prisma.wine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WineUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WineUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wine.
     * @param {WineUpsertArgs} args - Arguments to update or create a Wine.
     * @example
     * // Update or create a Wine
     * const wine = await prisma.wine.upsert({
     *   create: {
     *     // ... data to create a Wine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wine we want to update
     *   }
     * })
    **/
    upsert<T extends WineUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WineUpsertArgs<ExtArgs>>
    ): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Wines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineCountArgs} args - Arguments to filter Wines to count.
     * @example
     * // Count the number of Wines
     * const count = await prisma.wine.count({
     *   where: {
     *     // ... the filter for the Wines we want to count
     *   }
     * })
    **/
    count<T extends WineCountArgs>(
      args?: Subset<T, WineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WineAggregateArgs>(args: Subset<T, WineAggregateArgs>): Prisma.PrismaPromise<GetWineAggregateType<T>>

    /**
     * Group by Wine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WineGroupByArgs['orderBy'] }
        : { orderBy?: WineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wine model
   */
  readonly fields: WineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    type<T extends TypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypeDefaultArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    grape<T extends GrapeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrapeDefaultArgs<ExtArgs>>): Prisma__GrapeClient<$Result.GetResult<Prisma.$GrapePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    review<T extends Wine$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Wine$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    harmony<T extends HarmonyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HarmonyDefaultArgs<ExtArgs>>): Prisma__HarmonyClient<$Result.GetResult<Prisma.$HarmonyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Shopping<T extends Wine$ShoppingArgs<ExtArgs> = {}>(args?: Subset<T, Wine$ShoppingArgs<ExtArgs>>): Prisma__ShoppingClient<$Result.GetResult<Prisma.$ShoppingPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Wine model
   */ 
  interface WineFieldRefs {
    readonly id: FieldRef<"Wine", 'Int'>
    readonly label: FieldRef<"Wine", 'String'>
    readonly price: FieldRef<"Wine", 'Float'>
    readonly quantity: FieldRef<"Wine", 'Int'>
    readonly vinicula: FieldRef<"Wine", 'String'>
    readonly year: FieldRef<"Wine", 'Int'>
    readonly alchoolic: FieldRef<"Wine", 'Int'>
    readonly description: FieldRef<"Wine", 'String'>
    readonly img: FieldRef<"Wine", 'String'>
    readonly typeId: FieldRef<"Wine", 'Int'>
    readonly countryId: FieldRef<"Wine", 'Int'>
    readonly grapeId: FieldRef<"Wine", 'Int'>
    readonly harmonyId: FieldRef<"Wine", 'Int'>
    readonly shoppingId: FieldRef<"Wine", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Wine findUnique
   */
  export type WineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where: WineWhereUniqueInput
  }


  /**
   * Wine findUniqueOrThrow
   */
  export type WineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where: WineWhereUniqueInput
  }


  /**
   * Wine findFirst
   */
  export type WineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wines.
     */
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Wine findFirstOrThrow
   */
  export type WineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wines.
     */
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Wine findMany
   */
  export type WineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wines to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }


  /**
   * Wine create
   */
  export type WineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The data needed to create a Wine.
     */
    data: XOR<WineCreateInput, WineUncheckedCreateInput>
  }


  /**
   * Wine update
   */
  export type WineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The data needed to update a Wine.
     */
    data: XOR<WineUpdateInput, WineUncheckedUpdateInput>
    /**
     * Choose, which Wine to update.
     */
    where: WineWhereUniqueInput
  }


  /**
   * Wine updateMany
   */
  export type WineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wines.
     */
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyInput>
    /**
     * Filter which Wines to update
     */
    where?: WineWhereInput
  }


  /**
   * Wine upsert
   */
  export type WineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The filter to search for the Wine to update in case it exists.
     */
    where: WineWhereUniqueInput
    /**
     * In case the Wine found by the `where` argument doesn't exist, create a new Wine with this data.
     */
    create: XOR<WineCreateInput, WineUncheckedCreateInput>
    /**
     * In case the Wine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WineUpdateInput, WineUncheckedUpdateInput>
  }


  /**
   * Wine delete
   */
  export type WineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter which Wine to delete.
     */
    where: WineWhereUniqueInput
  }


  /**
   * Wine deleteMany
   */
  export type WineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wines to delete
     */
    where?: WineWhereInput
  }


  /**
   * Wine.review
   */
  export type Wine$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Wine.Shopping
   */
  export type Wine$ShoppingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shopping
     */
    select?: ShoppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShoppingInclude<ExtArgs> | null
    where?: ShoppingWhereInput
  }


  /**
   * Wine without action
   */
  export type WineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WineInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    telephone: 'telephone',
    password: 'password',
    address: 'address',
    isAdm: 'isAdm',
    birthday: 'birthday',
    gender: 'gender',
    img: 'img',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    review: 'review',
    wineId: 'wineId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ShoppingScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    shopping: 'shopping',
    userId: 'userId'
  };

  export type ShoppingScalarFieldEnum = (typeof ShoppingScalarFieldEnum)[keyof typeof ShoppingScalarFieldEnum]


  export const TypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    country: 'country'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const GrapeScalarFieldEnum: {
    id: 'id',
    grape: 'grape'
  };

  export type GrapeScalarFieldEnum = (typeof GrapeScalarFieldEnum)[keyof typeof GrapeScalarFieldEnum]


  export const HarmonyScalarFieldEnum: {
    id: 'id',
    harmony: 'harmony'
  };

  export type HarmonyScalarFieldEnum = (typeof HarmonyScalarFieldEnum)[keyof typeof HarmonyScalarFieldEnum]


  export const WineScalarFieldEnum: {
    id: 'id',
    label: 'label',
    price: 'price',
    quantity: 'quantity',
    vinicula: 'vinicula',
    year: 'year',
    alchoolic: 'alchoolic',
    description: 'description',
    img: 'img',
    typeId: 'typeId',
    countryId: 'countryId',
    grapeId: 'grapeId',
    harmonyId: 'harmonyId',
    shoppingId: 'shoppingId'
  };

  export type WineScalarFieldEnum = (typeof WineScalarFieldEnum)[keyof typeof WineScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    telephone?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    isAdm?: BoolFilter<"User"> | boolean
    birthday?: DateTimeFilter<"User"> | Date | string
    gender?: StringFilter<"User"> | string
    img?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Review?: ReviewListRelationFilter
    Shopping?: ShoppingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    isAdm?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    img?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Review?: ReviewOrderByRelationAggregateInput
    Shopping?: ShoppingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    telephone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    isAdm?: BoolFilter<"User"> | boolean
    birthday?: DateTimeFilter<"User"> | Date | string
    gender?: StringFilter<"User"> | string
    img?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Review?: ReviewListRelationFilter
    Shopping?: ShoppingListRelationFilter
  }, "id" | "email" | "telephone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    isAdm?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    img?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    telephone?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    isAdm?: BoolWithAggregatesFilter<"User"> | boolean
    birthday?: DateTimeWithAggregatesFilter<"User"> | Date | string
    gender?: StringWithAggregatesFilter<"User"> | string
    img?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    wineId?: IntNullableFilter<"Review"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    Wine?: XOR<WineNullableRelationFilter, WineWhereInput> | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    review?: SortOrder
    wineId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    Wine?: WineOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    wineId?: IntNullableFilter<"Review"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    Wine?: XOR<WineNullableRelationFilter, WineWhereInput> | null
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    review?: SortOrder
    wineId?: SortOrderInput | SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    userId?: IntWithAggregatesFilter<"Review"> | number
    review?: StringWithAggregatesFilter<"Review"> | string
    wineId?: IntNullableWithAggregatesFilter<"Review"> | number | null
  }

  export type ShoppingWhereInput = {
    AND?: ShoppingWhereInput | ShoppingWhereInput[]
    OR?: ShoppingWhereInput[]
    NOT?: ShoppingWhereInput | ShoppingWhereInput[]
    id?: IntFilter<"Shopping"> | number
    createdAt?: DateTimeFilter<"Shopping"> | Date | string
    updatedAt?: DateTimeFilter<"Shopping"> | Date | string
    shopping?: StringFilter<"Shopping"> | string
    userId?: IntFilter<"Shopping"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    Wine?: WineListRelationFilter
  }

  export type ShoppingOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopping?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    Wine?: WineOrderByRelationAggregateInput
  }

  export type ShoppingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShoppingWhereInput | ShoppingWhereInput[]
    OR?: ShoppingWhereInput[]
    NOT?: ShoppingWhereInput | ShoppingWhereInput[]
    createdAt?: DateTimeFilter<"Shopping"> | Date | string
    updatedAt?: DateTimeFilter<"Shopping"> | Date | string
    shopping?: StringFilter<"Shopping"> | string
    userId?: IntFilter<"Shopping"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    Wine?: WineListRelationFilter
  }, "id">

  export type ShoppingOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopping?: SortOrder
    userId?: SortOrder
    _count?: ShoppingCountOrderByAggregateInput
    _avg?: ShoppingAvgOrderByAggregateInput
    _max?: ShoppingMaxOrderByAggregateInput
    _min?: ShoppingMinOrderByAggregateInput
    _sum?: ShoppingSumOrderByAggregateInput
  }

  export type ShoppingScalarWhereWithAggregatesInput = {
    AND?: ShoppingScalarWhereWithAggregatesInput | ShoppingScalarWhereWithAggregatesInput[]
    OR?: ShoppingScalarWhereWithAggregatesInput[]
    NOT?: ShoppingScalarWhereWithAggregatesInput | ShoppingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shopping"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Shopping"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shopping"> | Date | string
    shopping?: StringWithAggregatesFilter<"Shopping"> | string
    userId?: IntWithAggregatesFilter<"Shopping"> | number
  }

  export type TypeWhereInput = {
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    id?: IntFilter<"Type"> | number
    type?: StringFilter<"Type"> | string
    Wine?: WineListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    Wine?: WineOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    type?: string
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    Wine?: WineListRelationFilter
  }, "id" | "type">

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    OR?: TypeScalarWhereWithAggregatesInput[]
    NOT?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Type"> | number
    type?: StringWithAggregatesFilter<"Type"> | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    country?: StringFilter<"Country"> | string
    Wine?: WineListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrder
    Wine?: WineOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    country?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    Wine?: WineListRelationFilter
  }, "id" | "country">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    country?: StringWithAggregatesFilter<"Country"> | string
  }

  export type GrapeWhereInput = {
    AND?: GrapeWhereInput | GrapeWhereInput[]
    OR?: GrapeWhereInput[]
    NOT?: GrapeWhereInput | GrapeWhereInput[]
    id?: IntFilter<"Grape"> | number
    grape?: StringFilter<"Grape"> | string
    Wine?: WineListRelationFilter
  }

  export type GrapeOrderByWithRelationInput = {
    id?: SortOrder
    grape?: SortOrder
    Wine?: WineOrderByRelationAggregateInput
  }

  export type GrapeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    grape?: string
    AND?: GrapeWhereInput | GrapeWhereInput[]
    OR?: GrapeWhereInput[]
    NOT?: GrapeWhereInput | GrapeWhereInput[]
    Wine?: WineListRelationFilter
  }, "id" | "grape">

  export type GrapeOrderByWithAggregationInput = {
    id?: SortOrder
    grape?: SortOrder
    _count?: GrapeCountOrderByAggregateInput
    _avg?: GrapeAvgOrderByAggregateInput
    _max?: GrapeMaxOrderByAggregateInput
    _min?: GrapeMinOrderByAggregateInput
    _sum?: GrapeSumOrderByAggregateInput
  }

  export type GrapeScalarWhereWithAggregatesInput = {
    AND?: GrapeScalarWhereWithAggregatesInput | GrapeScalarWhereWithAggregatesInput[]
    OR?: GrapeScalarWhereWithAggregatesInput[]
    NOT?: GrapeScalarWhereWithAggregatesInput | GrapeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grape"> | number
    grape?: StringWithAggregatesFilter<"Grape"> | string
  }

  export type HarmonyWhereInput = {
    AND?: HarmonyWhereInput | HarmonyWhereInput[]
    OR?: HarmonyWhereInput[]
    NOT?: HarmonyWhereInput | HarmonyWhereInput[]
    id?: IntFilter<"Harmony"> | number
    harmony?: StringFilter<"Harmony"> | string
    Wine?: WineListRelationFilter
  }

  export type HarmonyOrderByWithRelationInput = {
    id?: SortOrder
    harmony?: SortOrder
    Wine?: WineOrderByRelationAggregateInput
  }

  export type HarmonyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    harmony?: string
    AND?: HarmonyWhereInput | HarmonyWhereInput[]
    OR?: HarmonyWhereInput[]
    NOT?: HarmonyWhereInput | HarmonyWhereInput[]
    Wine?: WineListRelationFilter
  }, "id" | "harmony">

  export type HarmonyOrderByWithAggregationInput = {
    id?: SortOrder
    harmony?: SortOrder
    _count?: HarmonyCountOrderByAggregateInput
    _avg?: HarmonyAvgOrderByAggregateInput
    _max?: HarmonyMaxOrderByAggregateInput
    _min?: HarmonyMinOrderByAggregateInput
    _sum?: HarmonySumOrderByAggregateInput
  }

  export type HarmonyScalarWhereWithAggregatesInput = {
    AND?: HarmonyScalarWhereWithAggregatesInput | HarmonyScalarWhereWithAggregatesInput[]
    OR?: HarmonyScalarWhereWithAggregatesInput[]
    NOT?: HarmonyScalarWhereWithAggregatesInput | HarmonyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Harmony"> | number
    harmony?: StringWithAggregatesFilter<"Harmony"> | string
  }

  export type WineWhereInput = {
    AND?: WineWhereInput | WineWhereInput[]
    OR?: WineWhereInput[]
    NOT?: WineWhereInput | WineWhereInput[]
    id?: IntFilter<"Wine"> | number
    label?: StringFilter<"Wine"> | string
    price?: FloatFilter<"Wine"> | number
    quantity?: IntFilter<"Wine"> | number
    vinicula?: StringFilter<"Wine"> | string
    year?: IntFilter<"Wine"> | number
    alchoolic?: IntFilter<"Wine"> | number
    description?: StringFilter<"Wine"> | string
    img?: StringFilter<"Wine"> | string
    typeId?: IntFilter<"Wine"> | number
    countryId?: IntFilter<"Wine"> | number
    grapeId?: IntFilter<"Wine"> | number
    harmonyId?: IntFilter<"Wine"> | number
    shoppingId?: IntNullableFilter<"Wine"> | number | null
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    grape?: XOR<GrapeRelationFilter, GrapeWhereInput>
    review?: ReviewListRelationFilter
    harmony?: XOR<HarmonyRelationFilter, HarmonyWhereInput>
    Shopping?: XOR<ShoppingNullableRelationFilter, ShoppingWhereInput> | null
  }

  export type WineOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    vinicula?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    description?: SortOrder
    img?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrderInput | SortOrder
    type?: TypeOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    grape?: GrapeOrderByWithRelationInput
    review?: ReviewOrderByRelationAggregateInput
    harmony?: HarmonyOrderByWithRelationInput
    Shopping?: ShoppingOrderByWithRelationInput
  }

  export type WineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WineWhereInput | WineWhereInput[]
    OR?: WineWhereInput[]
    NOT?: WineWhereInput | WineWhereInput[]
    label?: StringFilter<"Wine"> | string
    price?: FloatFilter<"Wine"> | number
    quantity?: IntFilter<"Wine"> | number
    vinicula?: StringFilter<"Wine"> | string
    year?: IntFilter<"Wine"> | number
    alchoolic?: IntFilter<"Wine"> | number
    description?: StringFilter<"Wine"> | string
    img?: StringFilter<"Wine"> | string
    typeId?: IntFilter<"Wine"> | number
    countryId?: IntFilter<"Wine"> | number
    grapeId?: IntFilter<"Wine"> | number
    harmonyId?: IntFilter<"Wine"> | number
    shoppingId?: IntNullableFilter<"Wine"> | number | null
    type?: XOR<TypeRelationFilter, TypeWhereInput>
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    grape?: XOR<GrapeRelationFilter, GrapeWhereInput>
    review?: ReviewListRelationFilter
    harmony?: XOR<HarmonyRelationFilter, HarmonyWhereInput>
    Shopping?: XOR<ShoppingNullableRelationFilter, ShoppingWhereInput> | null
  }, "id">

  export type WineOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    vinicula?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    description?: SortOrder
    img?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrderInput | SortOrder
    _count?: WineCountOrderByAggregateInput
    _avg?: WineAvgOrderByAggregateInput
    _max?: WineMaxOrderByAggregateInput
    _min?: WineMinOrderByAggregateInput
    _sum?: WineSumOrderByAggregateInput
  }

  export type WineScalarWhereWithAggregatesInput = {
    AND?: WineScalarWhereWithAggregatesInput | WineScalarWhereWithAggregatesInput[]
    OR?: WineScalarWhereWithAggregatesInput[]
    NOT?: WineScalarWhereWithAggregatesInput | WineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Wine"> | number
    label?: StringWithAggregatesFilter<"Wine"> | string
    price?: FloatWithAggregatesFilter<"Wine"> | number
    quantity?: IntWithAggregatesFilter<"Wine"> | number
    vinicula?: StringWithAggregatesFilter<"Wine"> | string
    year?: IntWithAggregatesFilter<"Wine"> | number
    alchoolic?: IntWithAggregatesFilter<"Wine"> | number
    description?: StringWithAggregatesFilter<"Wine"> | string
    img?: StringWithAggregatesFilter<"Wine"> | string
    typeId?: IntWithAggregatesFilter<"Wine"> | number
    countryId?: IntWithAggregatesFilter<"Wine"> | number
    grapeId?: IntWithAggregatesFilter<"Wine"> | number
    harmonyId?: IntWithAggregatesFilter<"Wine"> | number
    shoppingId?: IntNullableWithAggregatesFilter<"Wine"> | number | null
  }

  export type UserCreateInput = {
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Review?: ReviewCreateNestedManyWithoutUserInput
    Shopping?: ShoppingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    Shopping?: ShoppingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateManyWithoutUserNestedInput
    Shopping?: ShoppingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    Shopping?: ShoppingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    review: string
    user: UserCreateNestedOneWithoutReviewInput
    Wine?: WineCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    review: string
    wineId?: number | null
  }

  export type ReviewUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReviewNestedInput
    Wine?: WineUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    wineId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReviewUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    wineId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShoppingCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    user: UserCreateNestedOneWithoutShoppingInput
    Wine?: WineCreateNestedManyWithoutShoppingInput
  }

  export type ShoppingUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    userId: number
    Wine?: WineUncheckedCreateNestedManyWithoutShoppingInput
  }

  export type ShoppingUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutShoppingNestedInput
    Wine?: WineUpdateManyWithoutShoppingNestedInput
  }

  export type ShoppingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    Wine?: WineUncheckedUpdateManyWithoutShoppingNestedInput
  }

  export type ShoppingUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TypeCreateInput = {
    type: string
    Wine?: WineCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: number
    type: string
    Wine?: WineUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    Wine?: WineUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type CountryCreateInput = {
    country: string
    Wine?: WineCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    country: string
    Wine?: WineUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    country?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    Wine?: WineUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryUpdateManyMutationInput = {
    country?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
  }

  export type GrapeCreateInput = {
    grape: string
    Wine?: WineCreateNestedManyWithoutGrapeInput
  }

  export type GrapeUncheckedCreateInput = {
    id?: number
    grape: string
    Wine?: WineUncheckedCreateNestedManyWithoutGrapeInput
  }

  export type GrapeUpdateInput = {
    grape?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateManyWithoutGrapeNestedInput
  }

  export type GrapeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    grape?: StringFieldUpdateOperationsInput | string
    Wine?: WineUncheckedUpdateManyWithoutGrapeNestedInput
  }

  export type GrapeUpdateManyMutationInput = {
    grape?: StringFieldUpdateOperationsInput | string
  }

  export type GrapeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    grape?: StringFieldUpdateOperationsInput | string
  }

  export type HarmonyCreateInput = {
    harmony: string
    Wine?: WineCreateNestedManyWithoutHarmonyInput
  }

  export type HarmonyUncheckedCreateInput = {
    id?: number
    harmony: string
    Wine?: WineUncheckedCreateNestedManyWithoutHarmonyInput
  }

  export type HarmonyUpdateInput = {
    harmony?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateManyWithoutHarmonyNestedInput
  }

  export type HarmonyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    harmony?: StringFieldUpdateOperationsInput | string
    Wine?: WineUncheckedUpdateManyWithoutHarmonyNestedInput
  }

  export type HarmonyUpdateManyMutationInput = {
    harmony?: StringFieldUpdateOperationsInput | string
  }

  export type HarmonyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    harmony?: StringFieldUpdateOperationsInput | string
  }

  export type WineCreateInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    country: CountryCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    grapeId: number
    harmonyId: number
    shoppingId?: number | null
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
  }

  export type WineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ShoppingListRelationFilter = {
    every?: ShoppingWhereInput
    some?: ShoppingWhereInput
    none?: ShoppingWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    isAdm?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    img?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    isAdm?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    img?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    address?: SortOrder
    isAdm?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    img?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WineNullableRelationFilter = {
    is?: WineWhereInput | null
    isNot?: WineWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    review?: SortOrder
    wineId?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wineId?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    review?: SortOrder
    wineId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    review?: SortOrder
    wineId?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    wineId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WineListRelationFilter = {
    every?: WineWhereInput
    some?: WineWhereInput
    none?: WineWhereInput
  }

  export type WineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopping?: SortOrder
    userId?: SortOrder
  }

  export type ShoppingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ShoppingMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopping?: SortOrder
    userId?: SortOrder
  }

  export type ShoppingMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shopping?: SortOrder
    userId?: SortOrder
  }

  export type ShoppingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GrapeCountOrderByAggregateInput = {
    id?: SortOrder
    grape?: SortOrder
  }

  export type GrapeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GrapeMaxOrderByAggregateInput = {
    id?: SortOrder
    grape?: SortOrder
  }

  export type GrapeMinOrderByAggregateInput = {
    id?: SortOrder
    grape?: SortOrder
  }

  export type GrapeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HarmonyCountOrderByAggregateInput = {
    id?: SortOrder
    harmony?: SortOrder
  }

  export type HarmonyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HarmonyMaxOrderByAggregateInput = {
    id?: SortOrder
    harmony?: SortOrder
  }

  export type HarmonyMinOrderByAggregateInput = {
    id?: SortOrder
    harmony?: SortOrder
  }

  export type HarmonySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput
    isNot?: TypeWhereInput
  }

  export type CountryRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type GrapeRelationFilter = {
    is?: GrapeWhereInput
    isNot?: GrapeWhereInput
  }

  export type HarmonyRelationFilter = {
    is?: HarmonyWhereInput
    isNot?: HarmonyWhereInput
  }

  export type ShoppingNullableRelationFilter = {
    is?: ShoppingWhereInput | null
    isNot?: ShoppingWhereInput | null
  }

  export type WineCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    vinicula?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    description?: SortOrder
    img?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrder
  }

  export type WineAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrder
  }

  export type WineMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    vinicula?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    description?: SortOrder
    img?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrder
  }

  export type WineMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    vinicula?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    description?: SortOrder
    img?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrder
  }

  export type WineSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    year?: SortOrder
    alchoolic?: SortOrder
    typeId?: SortOrder
    countryId?: SortOrder
    grapeId?: SortOrder
    harmonyId?: SortOrder
    shoppingId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ShoppingCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput> | ShoppingCreateWithoutUserInput[] | ShoppingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCreateOrConnectWithoutUserInput | ShoppingCreateOrConnectWithoutUserInput[]
    connect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ShoppingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput> | ShoppingCreateWithoutUserInput[] | ShoppingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCreateOrConnectWithoutUserInput | ShoppingCreateOrConnectWithoutUserInput[]
    connect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ShoppingUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput> | ShoppingCreateWithoutUserInput[] | ShoppingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCreateOrConnectWithoutUserInput | ShoppingCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingUpsertWithWhereUniqueWithoutUserInput | ShoppingUpsertWithWhereUniqueWithoutUserInput[]
    set?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    disconnect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    delete?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    connect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    update?: ShoppingUpdateWithWhereUniqueWithoutUserInput | ShoppingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingUpdateManyWithWhereWithoutUserInput | ShoppingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingScalarWhereInput | ShoppingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ShoppingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput> | ShoppingCreateWithoutUserInput[] | ShoppingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCreateOrConnectWithoutUserInput | ShoppingCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingUpsertWithWhereUniqueWithoutUserInput | ShoppingUpsertWithWhereUniqueWithoutUserInput[]
    set?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    disconnect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    delete?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    connect?: ShoppingWhereUniqueInput | ShoppingWhereUniqueInput[]
    update?: ShoppingUpdateWithWhereUniqueWithoutUserInput | ShoppingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingUpdateManyWithWhereWithoutUserInput | ShoppingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingScalarWhereInput | ShoppingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReviewInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    connect?: UserWhereUniqueInput
  }

  export type WineCreateNestedOneWithoutReviewInput = {
    create?: XOR<WineCreateWithoutReviewInput, WineUncheckedCreateWithoutReviewInput>
    connectOrCreate?: WineCreateOrConnectWithoutReviewInput
    connect?: WineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewInput
    upsert?: UserUpsertWithoutReviewInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewInput, UserUpdateWithoutReviewInput>, UserUncheckedUpdateWithoutReviewInput>
  }

  export type WineUpdateOneWithoutReviewNestedInput = {
    create?: XOR<WineCreateWithoutReviewInput, WineUncheckedCreateWithoutReviewInput>
    connectOrCreate?: WineCreateOrConnectWithoutReviewInput
    upsert?: WineUpsertWithoutReviewInput
    disconnect?: WineWhereInput | boolean
    delete?: WineWhereInput | boolean
    connect?: WineWhereUniqueInput
    update?: XOR<XOR<WineUpdateToOneWithWhereWithoutReviewInput, WineUpdateWithoutReviewInput>, WineUncheckedUpdateWithoutReviewInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutShoppingInput = {
    create?: XOR<UserCreateWithoutShoppingInput, UserUncheckedCreateWithoutShoppingInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingInput
    connect?: UserWhereUniqueInput
  }

  export type WineCreateNestedManyWithoutShoppingInput = {
    create?: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput> | WineCreateWithoutShoppingInput[] | WineUncheckedCreateWithoutShoppingInput[]
    connectOrCreate?: WineCreateOrConnectWithoutShoppingInput | WineCreateOrConnectWithoutShoppingInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutShoppingInput = {
    create?: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput> | WineCreateWithoutShoppingInput[] | WineUncheckedCreateWithoutShoppingInput[]
    connectOrCreate?: WineCreateOrConnectWithoutShoppingInput | WineCreateOrConnectWithoutShoppingInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutShoppingNestedInput = {
    create?: XOR<UserCreateWithoutShoppingInput, UserUncheckedCreateWithoutShoppingInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingInput
    upsert?: UserUpsertWithoutShoppingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingInput, UserUpdateWithoutShoppingInput>, UserUncheckedUpdateWithoutShoppingInput>
  }

  export type WineUpdateManyWithoutShoppingNestedInput = {
    create?: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput> | WineCreateWithoutShoppingInput[] | WineUncheckedCreateWithoutShoppingInput[]
    connectOrCreate?: WineCreateOrConnectWithoutShoppingInput | WineCreateOrConnectWithoutShoppingInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutShoppingInput | WineUpsertWithWhereUniqueWithoutShoppingInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutShoppingInput | WineUpdateWithWhereUniqueWithoutShoppingInput[]
    updateMany?: WineUpdateManyWithWhereWithoutShoppingInput | WineUpdateManyWithWhereWithoutShoppingInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutShoppingNestedInput = {
    create?: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput> | WineCreateWithoutShoppingInput[] | WineUncheckedCreateWithoutShoppingInput[]
    connectOrCreate?: WineCreateOrConnectWithoutShoppingInput | WineCreateOrConnectWithoutShoppingInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutShoppingInput | WineUpsertWithWhereUniqueWithoutShoppingInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutShoppingInput | WineUpdateWithWhereUniqueWithoutShoppingInput[]
    updateMany?: WineUpdateManyWithWhereWithoutShoppingInput | WineUpdateManyWithWhereWithoutShoppingInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutTypeInput = {
    create?: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput> | WineCreateWithoutTypeInput[] | WineUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutTypeInput | WineCreateOrConnectWithoutTypeInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput> | WineCreateWithoutTypeInput[] | WineUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutTypeInput | WineCreateOrConnectWithoutTypeInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutTypeNestedInput = {
    create?: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput> | WineCreateWithoutTypeInput[] | WineUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutTypeInput | WineCreateOrConnectWithoutTypeInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutTypeInput | WineUpsertWithWhereUniqueWithoutTypeInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutTypeInput | WineUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: WineUpdateManyWithWhereWithoutTypeInput | WineUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput> | WineCreateWithoutTypeInput[] | WineUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutTypeInput | WineCreateOrConnectWithoutTypeInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutTypeInput | WineUpsertWithWhereUniqueWithoutTypeInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutTypeInput | WineUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: WineUpdateManyWithWhereWithoutTypeInput | WineUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutCountryInput = {
    create?: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput> | WineCreateWithoutCountryInput[] | WineUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCountryInput | WineCreateOrConnectWithoutCountryInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput> | WineCreateWithoutCountryInput[] | WineUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCountryInput | WineCreateOrConnectWithoutCountryInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutCountryNestedInput = {
    create?: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput> | WineCreateWithoutCountryInput[] | WineUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCountryInput | WineCreateOrConnectWithoutCountryInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutCountryInput | WineUpsertWithWhereUniqueWithoutCountryInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutCountryInput | WineUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: WineUpdateManyWithWhereWithoutCountryInput | WineUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput> | WineCreateWithoutCountryInput[] | WineUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCountryInput | WineCreateOrConnectWithoutCountryInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutCountryInput | WineUpsertWithWhereUniqueWithoutCountryInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutCountryInput | WineUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: WineUpdateManyWithWhereWithoutCountryInput | WineUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutGrapeInput = {
    create?: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput> | WineCreateWithoutGrapeInput[] | WineUncheckedCreateWithoutGrapeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutGrapeInput | WineCreateOrConnectWithoutGrapeInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutGrapeInput = {
    create?: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput> | WineCreateWithoutGrapeInput[] | WineUncheckedCreateWithoutGrapeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutGrapeInput | WineCreateOrConnectWithoutGrapeInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutGrapeNestedInput = {
    create?: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput> | WineCreateWithoutGrapeInput[] | WineUncheckedCreateWithoutGrapeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutGrapeInput | WineCreateOrConnectWithoutGrapeInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutGrapeInput | WineUpsertWithWhereUniqueWithoutGrapeInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutGrapeInput | WineUpdateWithWhereUniqueWithoutGrapeInput[]
    updateMany?: WineUpdateManyWithWhereWithoutGrapeInput | WineUpdateManyWithWhereWithoutGrapeInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutGrapeNestedInput = {
    create?: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput> | WineCreateWithoutGrapeInput[] | WineUncheckedCreateWithoutGrapeInput[]
    connectOrCreate?: WineCreateOrConnectWithoutGrapeInput | WineCreateOrConnectWithoutGrapeInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutGrapeInput | WineUpsertWithWhereUniqueWithoutGrapeInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutGrapeInput | WineUpdateWithWhereUniqueWithoutGrapeInput[]
    updateMany?: WineUpdateManyWithWhereWithoutGrapeInput | WineUpdateManyWithWhereWithoutGrapeInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutHarmonyInput = {
    create?: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput> | WineCreateWithoutHarmonyInput[] | WineUncheckedCreateWithoutHarmonyInput[]
    connectOrCreate?: WineCreateOrConnectWithoutHarmonyInput | WineCreateOrConnectWithoutHarmonyInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutHarmonyInput = {
    create?: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput> | WineCreateWithoutHarmonyInput[] | WineUncheckedCreateWithoutHarmonyInput[]
    connectOrCreate?: WineCreateOrConnectWithoutHarmonyInput | WineCreateOrConnectWithoutHarmonyInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutHarmonyNestedInput = {
    create?: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput> | WineCreateWithoutHarmonyInput[] | WineUncheckedCreateWithoutHarmonyInput[]
    connectOrCreate?: WineCreateOrConnectWithoutHarmonyInput | WineCreateOrConnectWithoutHarmonyInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutHarmonyInput | WineUpsertWithWhereUniqueWithoutHarmonyInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutHarmonyInput | WineUpdateWithWhereUniqueWithoutHarmonyInput[]
    updateMany?: WineUpdateManyWithWhereWithoutHarmonyInput | WineUpdateManyWithWhereWithoutHarmonyInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutHarmonyNestedInput = {
    create?: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput> | WineCreateWithoutHarmonyInput[] | WineUncheckedCreateWithoutHarmonyInput[]
    connectOrCreate?: WineCreateOrConnectWithoutHarmonyInput | WineCreateOrConnectWithoutHarmonyInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutHarmonyInput | WineUpsertWithWhereUniqueWithoutHarmonyInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutHarmonyInput | WineUpdateWithWhereUniqueWithoutHarmonyInput[]
    updateMany?: WineUpdateManyWithWhereWithoutHarmonyInput | WineUpdateManyWithWhereWithoutHarmonyInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type TypeCreateNestedOneWithoutWineInput = {
    create?: XOR<TypeCreateWithoutWineInput, TypeUncheckedCreateWithoutWineInput>
    connectOrCreate?: TypeCreateOrConnectWithoutWineInput
    connect?: TypeWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutWineInput = {
    create?: XOR<CountryCreateWithoutWineInput, CountryUncheckedCreateWithoutWineInput>
    connectOrCreate?: CountryCreateOrConnectWithoutWineInput
    connect?: CountryWhereUniqueInput
  }

  export type GrapeCreateNestedOneWithoutWineInput = {
    create?: XOR<GrapeCreateWithoutWineInput, GrapeUncheckedCreateWithoutWineInput>
    connectOrCreate?: GrapeCreateOrConnectWithoutWineInput
    connect?: GrapeWhereUniqueInput
  }

  export type ReviewCreateNestedManyWithoutWineInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type HarmonyCreateNestedOneWithoutWineInput = {
    create?: XOR<HarmonyCreateWithoutWineInput, HarmonyUncheckedCreateWithoutWineInput>
    connectOrCreate?: HarmonyCreateOrConnectWithoutWineInput
    connect?: HarmonyWhereUniqueInput
  }

  export type ShoppingCreateNestedOneWithoutWineInput = {
    create?: XOR<ShoppingCreateWithoutWineInput, ShoppingUncheckedCreateWithoutWineInput>
    connectOrCreate?: ShoppingCreateOrConnectWithoutWineInput
    connect?: ShoppingWhereUniqueInput
  }

  export type ReviewUncheckedCreateNestedManyWithoutWineInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TypeUpdateOneRequiredWithoutWineNestedInput = {
    create?: XOR<TypeCreateWithoutWineInput, TypeUncheckedCreateWithoutWineInput>
    connectOrCreate?: TypeCreateOrConnectWithoutWineInput
    upsert?: TypeUpsertWithoutWineInput
    connect?: TypeWhereUniqueInput
    update?: XOR<XOR<TypeUpdateToOneWithWhereWithoutWineInput, TypeUpdateWithoutWineInput>, TypeUncheckedUpdateWithoutWineInput>
  }

  export type CountryUpdateOneRequiredWithoutWineNestedInput = {
    create?: XOR<CountryCreateWithoutWineInput, CountryUncheckedCreateWithoutWineInput>
    connectOrCreate?: CountryCreateOrConnectWithoutWineInput
    upsert?: CountryUpsertWithoutWineInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutWineInput, CountryUpdateWithoutWineInput>, CountryUncheckedUpdateWithoutWineInput>
  }

  export type GrapeUpdateOneRequiredWithoutWineNestedInput = {
    create?: XOR<GrapeCreateWithoutWineInput, GrapeUncheckedCreateWithoutWineInput>
    connectOrCreate?: GrapeCreateOrConnectWithoutWineInput
    upsert?: GrapeUpsertWithoutWineInput
    connect?: GrapeWhereUniqueInput
    update?: XOR<XOR<GrapeUpdateToOneWithWhereWithoutWineInput, GrapeUpdateWithoutWineInput>, GrapeUncheckedUpdateWithoutWineInput>
  }

  export type ReviewUpdateManyWithoutWineNestedInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWineInput | ReviewUpsertWithWhereUniqueWithoutWineInput[]
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWineInput | ReviewUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWineInput | ReviewUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type HarmonyUpdateOneRequiredWithoutWineNestedInput = {
    create?: XOR<HarmonyCreateWithoutWineInput, HarmonyUncheckedCreateWithoutWineInput>
    connectOrCreate?: HarmonyCreateOrConnectWithoutWineInput
    upsert?: HarmonyUpsertWithoutWineInput
    connect?: HarmonyWhereUniqueInput
    update?: XOR<XOR<HarmonyUpdateToOneWithWhereWithoutWineInput, HarmonyUpdateWithoutWineInput>, HarmonyUncheckedUpdateWithoutWineInput>
  }

  export type ShoppingUpdateOneWithoutWineNestedInput = {
    create?: XOR<ShoppingCreateWithoutWineInput, ShoppingUncheckedCreateWithoutWineInput>
    connectOrCreate?: ShoppingCreateOrConnectWithoutWineInput
    upsert?: ShoppingUpsertWithoutWineInput
    disconnect?: ShoppingWhereInput | boolean
    delete?: ShoppingWhereInput | boolean
    connect?: ShoppingWhereUniqueInput
    update?: XOR<XOR<ShoppingUpdateToOneWithWhereWithoutWineInput, ShoppingUpdateWithoutWineInput>, ShoppingUncheckedUpdateWithoutWineInput>
  }

  export type ReviewUncheckedUpdateManyWithoutWineNestedInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWineInput | ReviewUpsertWithWhereUniqueWithoutWineInput[]
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWineInput | ReviewUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWineInput | ReviewUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ReviewCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    review: string
    Wine?: WineCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    review: string
    wineId?: number | null
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ShoppingCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    Wine?: WineCreateNestedManyWithoutShoppingInput
  }

  export type ShoppingUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    Wine?: WineUncheckedCreateNestedManyWithoutShoppingInput
  }

  export type ShoppingCreateOrConnectWithoutUserInput = {
    where: ShoppingWhereUniqueInput
    create: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    wineId?: IntNullableFilter<"Review"> | number | null
  }

  export type ShoppingUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingWhereUniqueInput
    update: XOR<ShoppingUpdateWithoutUserInput, ShoppingUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingCreateWithoutUserInput, ShoppingUncheckedCreateWithoutUserInput>
  }

  export type ShoppingUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingWhereUniqueInput
    data: XOR<ShoppingUpdateWithoutUserInput, ShoppingUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingScalarWhereInput
    data: XOR<ShoppingUpdateManyMutationInput, ShoppingUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingScalarWhereInput = {
    AND?: ShoppingScalarWhereInput | ShoppingScalarWhereInput[]
    OR?: ShoppingScalarWhereInput[]
    NOT?: ShoppingScalarWhereInput | ShoppingScalarWhereInput[]
    id?: IntFilter<"Shopping"> | number
    createdAt?: DateTimeFilter<"Shopping"> | Date | string
    updatedAt?: DateTimeFilter<"Shopping"> | Date | string
    shopping?: StringFilter<"Shopping"> | string
    userId?: IntFilter<"Shopping"> | number
  }

  export type UserCreateWithoutReviewInput = {
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Shopping?: ShoppingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewInput = {
    id?: number
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Shopping?: ShoppingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
  }

  export type WineCreateWithoutReviewInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    country: CountryCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutReviewInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    grapeId: number
    harmonyId: number
    shoppingId?: number | null
  }

  export type WineCreateOrConnectWithoutReviewInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutReviewInput, WineUncheckedCreateWithoutReviewInput>
  }

  export type UserUpsertWithoutReviewInput = {
    update: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
    create: XOR<UserCreateWithoutReviewInput, UserUncheckedCreateWithoutReviewInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewInput, UserUncheckedUpdateWithoutReviewInput>
  }

  export type UserUpdateWithoutReviewInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Shopping?: ShoppingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Shopping?: ShoppingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WineUpsertWithoutReviewInput = {
    update: XOR<WineUpdateWithoutReviewInput, WineUncheckedUpdateWithoutReviewInput>
    create: XOR<WineCreateWithoutReviewInput, WineUncheckedCreateWithoutReviewInput>
    where?: WineWhereInput
  }

  export type WineUpdateToOneWithWhereWithoutReviewInput = {
    where?: WineWhereInput
    data: XOR<WineUpdateWithoutReviewInput, WineUncheckedUpdateWithoutReviewInput>
  }

  export type WineUpdateWithoutReviewInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateWithoutShoppingInput = {
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Review?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShoppingInput = {
    id?: number
    name: string
    email: string
    telephone: string
    password: string
    address: string
    isAdm?: boolean
    birthday: Date | string
    gender: string
    img: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Review?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShoppingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingInput, UserUncheckedCreateWithoutShoppingInput>
  }

  export type WineCreateWithoutShoppingInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    country: CountryCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutShoppingInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    grapeId: number
    harmonyId: number
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutShoppingInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput>
  }

  export type UserUpsertWithoutShoppingInput = {
    update: XOR<UserUpdateWithoutShoppingInput, UserUncheckedUpdateWithoutShoppingInput>
    create: XOR<UserCreateWithoutShoppingInput, UserUncheckedCreateWithoutShoppingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingInput, UserUncheckedUpdateWithoutShoppingInput>
  }

  export type UserUpdateWithoutShoppingInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    isAdm?: BoolFieldUpdateOperationsInput | boolean
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WineUpsertWithWhereUniqueWithoutShoppingInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutShoppingInput, WineUncheckedUpdateWithoutShoppingInput>
    create: XOR<WineCreateWithoutShoppingInput, WineUncheckedCreateWithoutShoppingInput>
  }

  export type WineUpdateWithWhereUniqueWithoutShoppingInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutShoppingInput, WineUncheckedUpdateWithoutShoppingInput>
  }

  export type WineUpdateManyWithWhereWithoutShoppingInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutShoppingInput>
  }

  export type WineScalarWhereInput = {
    AND?: WineScalarWhereInput | WineScalarWhereInput[]
    OR?: WineScalarWhereInput[]
    NOT?: WineScalarWhereInput | WineScalarWhereInput[]
    id?: IntFilter<"Wine"> | number
    label?: StringFilter<"Wine"> | string
    price?: FloatFilter<"Wine"> | number
    quantity?: IntFilter<"Wine"> | number
    vinicula?: StringFilter<"Wine"> | string
    year?: IntFilter<"Wine"> | number
    alchoolic?: IntFilter<"Wine"> | number
    description?: StringFilter<"Wine"> | string
    img?: StringFilter<"Wine"> | string
    typeId?: IntFilter<"Wine"> | number
    countryId?: IntFilter<"Wine"> | number
    grapeId?: IntFilter<"Wine"> | number
    harmonyId?: IntFilter<"Wine"> | number
    shoppingId?: IntNullableFilter<"Wine"> | number | null
  }

  export type WineCreateWithoutTypeInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    country: CountryCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutTypeInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    countryId: number
    grapeId: number
    harmonyId: number
    shoppingId?: number | null
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutTypeInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput>
  }

  export type WineUpsertWithWhereUniqueWithoutTypeInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutTypeInput, WineUncheckedUpdateWithoutTypeInput>
    create: XOR<WineCreateWithoutTypeInput, WineUncheckedCreateWithoutTypeInput>
  }

  export type WineUpdateWithWhereUniqueWithoutTypeInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutTypeInput, WineUncheckedUpdateWithoutTypeInput>
  }

  export type WineUpdateManyWithWhereWithoutTypeInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutTypeInput>
  }

  export type WineCreateWithoutCountryInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutCountryInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    grapeId: number
    harmonyId: number
    shoppingId?: number | null
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutCountryInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput>
  }

  export type WineUpsertWithWhereUniqueWithoutCountryInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutCountryInput, WineUncheckedUpdateWithoutCountryInput>
    create: XOR<WineCreateWithoutCountryInput, WineUncheckedCreateWithoutCountryInput>
  }

  export type WineUpdateWithWhereUniqueWithoutCountryInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutCountryInput, WineUncheckedUpdateWithoutCountryInput>
  }

  export type WineUpdateManyWithWhereWithoutCountryInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutCountryInput>
  }

  export type WineCreateWithoutGrapeInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    country: CountryCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    harmony: HarmonyCreateNestedOneWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutGrapeInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    harmonyId: number
    shoppingId?: number | null
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutGrapeInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput>
  }

  export type WineUpsertWithWhereUniqueWithoutGrapeInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutGrapeInput, WineUncheckedUpdateWithoutGrapeInput>
    create: XOR<WineCreateWithoutGrapeInput, WineUncheckedCreateWithoutGrapeInput>
  }

  export type WineUpdateWithWhereUniqueWithoutGrapeInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutGrapeInput, WineUncheckedUpdateWithoutGrapeInput>
  }

  export type WineUpdateManyWithWhereWithoutGrapeInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutGrapeInput>
  }

  export type WineCreateWithoutHarmonyInput = {
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    type: TypeCreateNestedOneWithoutWineInput
    country: CountryCreateNestedOneWithoutWineInput
    grape: GrapeCreateNestedOneWithoutWineInput
    review?: ReviewCreateNestedManyWithoutWineInput
    Shopping?: ShoppingCreateNestedOneWithoutWineInput
  }

  export type WineUncheckedCreateWithoutHarmonyInput = {
    id?: number
    label: string
    price: number
    quantity: number
    vinicula: string
    year: number
    alchoolic: number
    description: string
    img: string
    typeId: number
    countryId: number
    grapeId: number
    shoppingId?: number | null
    review?: ReviewUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutHarmonyInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput>
  }

  export type WineUpsertWithWhereUniqueWithoutHarmonyInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutHarmonyInput, WineUncheckedUpdateWithoutHarmonyInput>
    create: XOR<WineCreateWithoutHarmonyInput, WineUncheckedCreateWithoutHarmonyInput>
  }

  export type WineUpdateWithWhereUniqueWithoutHarmonyInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutHarmonyInput, WineUncheckedUpdateWithoutHarmonyInput>
  }

  export type WineUpdateManyWithWhereWithoutHarmonyInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutHarmonyInput>
  }

  export type TypeCreateWithoutWineInput = {
    type: string
  }

  export type TypeUncheckedCreateWithoutWineInput = {
    id?: number
    type: string
  }

  export type TypeCreateOrConnectWithoutWineInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutWineInput, TypeUncheckedCreateWithoutWineInput>
  }

  export type CountryCreateWithoutWineInput = {
    country: string
  }

  export type CountryUncheckedCreateWithoutWineInput = {
    id?: number
    country: string
  }

  export type CountryCreateOrConnectWithoutWineInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutWineInput, CountryUncheckedCreateWithoutWineInput>
  }

  export type GrapeCreateWithoutWineInput = {
    grape: string
  }

  export type GrapeUncheckedCreateWithoutWineInput = {
    id?: number
    grape: string
  }

  export type GrapeCreateOrConnectWithoutWineInput = {
    where: GrapeWhereUniqueInput
    create: XOR<GrapeCreateWithoutWineInput, GrapeUncheckedCreateWithoutWineInput>
  }

  export type ReviewCreateWithoutWineInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    review: string
    user: UserCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutWineInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    review: string
  }

  export type ReviewCreateOrConnectWithoutWineInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput>
  }

  export type HarmonyCreateWithoutWineInput = {
    harmony: string
  }

  export type HarmonyUncheckedCreateWithoutWineInput = {
    id?: number
    harmony: string
  }

  export type HarmonyCreateOrConnectWithoutWineInput = {
    where: HarmonyWhereUniqueInput
    create: XOR<HarmonyCreateWithoutWineInput, HarmonyUncheckedCreateWithoutWineInput>
  }

  export type ShoppingCreateWithoutWineInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    user: UserCreateNestedOneWithoutShoppingInput
  }

  export type ShoppingUncheckedCreateWithoutWineInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shopping: string
    userId: number
  }

  export type ShoppingCreateOrConnectWithoutWineInput = {
    where: ShoppingWhereUniqueInput
    create: XOR<ShoppingCreateWithoutWineInput, ShoppingUncheckedCreateWithoutWineInput>
  }

  export type TypeUpsertWithoutWineInput = {
    update: XOR<TypeUpdateWithoutWineInput, TypeUncheckedUpdateWithoutWineInput>
    create: XOR<TypeCreateWithoutWineInput, TypeUncheckedCreateWithoutWineInput>
    where?: TypeWhereInput
  }

  export type TypeUpdateToOneWithWhereWithoutWineInput = {
    where?: TypeWhereInput
    data: XOR<TypeUpdateWithoutWineInput, TypeUncheckedUpdateWithoutWineInput>
  }

  export type TypeUpdateWithoutWineInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type TypeUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUpsertWithoutWineInput = {
    update: XOR<CountryUpdateWithoutWineInput, CountryUncheckedUpdateWithoutWineInput>
    create: XOR<CountryCreateWithoutWineInput, CountryUncheckedCreateWithoutWineInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutWineInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutWineInput, CountryUncheckedUpdateWithoutWineInput>
  }

  export type CountryUpdateWithoutWineInput = {
    country?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
  }

  export type GrapeUpsertWithoutWineInput = {
    update: XOR<GrapeUpdateWithoutWineInput, GrapeUncheckedUpdateWithoutWineInput>
    create: XOR<GrapeCreateWithoutWineInput, GrapeUncheckedCreateWithoutWineInput>
    where?: GrapeWhereInput
  }

  export type GrapeUpdateToOneWithWhereWithoutWineInput = {
    where?: GrapeWhereInput
    data: XOR<GrapeUpdateWithoutWineInput, GrapeUncheckedUpdateWithoutWineInput>
  }

  export type GrapeUpdateWithoutWineInput = {
    grape?: StringFieldUpdateOperationsInput | string
  }

  export type GrapeUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    grape?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutWineInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutWineInput, ReviewUncheckedUpdateWithoutWineInput>
    create: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutWineInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutWineInput, ReviewUncheckedUpdateWithoutWineInput>
  }

  export type ReviewUpdateManyWithWhereWithoutWineInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutWineInput>
  }

  export type HarmonyUpsertWithoutWineInput = {
    update: XOR<HarmonyUpdateWithoutWineInput, HarmonyUncheckedUpdateWithoutWineInput>
    create: XOR<HarmonyCreateWithoutWineInput, HarmonyUncheckedCreateWithoutWineInput>
    where?: HarmonyWhereInput
  }

  export type HarmonyUpdateToOneWithWhereWithoutWineInput = {
    where?: HarmonyWhereInput
    data: XOR<HarmonyUpdateWithoutWineInput, HarmonyUncheckedUpdateWithoutWineInput>
  }

  export type HarmonyUpdateWithoutWineInput = {
    harmony?: StringFieldUpdateOperationsInput | string
  }

  export type HarmonyUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    harmony?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingUpsertWithoutWineInput = {
    update: XOR<ShoppingUpdateWithoutWineInput, ShoppingUncheckedUpdateWithoutWineInput>
    create: XOR<ShoppingCreateWithoutWineInput, ShoppingUncheckedCreateWithoutWineInput>
    where?: ShoppingWhereInput
  }

  export type ShoppingUpdateToOneWithWhereWithoutWineInput = {
    where?: ShoppingWhereInput
    data: XOR<ShoppingUpdateWithoutWineInput, ShoppingUncheckedUpdateWithoutWineInput>
  }

  export type ShoppingUpdateWithoutWineInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutShoppingNestedInput
  }

  export type ShoppingUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    wineId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    wineId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShoppingUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    Wine?: WineUpdateManyWithoutShoppingNestedInput
  }

  export type ShoppingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
    Wine?: WineUncheckedUpdateManyWithoutShoppingNestedInput
  }

  export type ShoppingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shopping?: StringFieldUpdateOperationsInput | string
  }

  export type WineUpdateWithoutShoppingInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutShoppingInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutShoppingInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
  }

  export type WineUpdateWithoutTypeInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WineUpdateWithoutCountryInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WineUpdateWithoutGrapeInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    harmony?: HarmonyUpdateOneRequiredWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutGrapeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutGrapeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    harmonyId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WineUpdateWithoutHarmonyInput = {
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    type?: TypeUpdateOneRequiredWithoutWineNestedInput
    country?: CountryUpdateOneRequiredWithoutWineNestedInput
    grape?: GrapeUpdateOneRequiredWithoutWineNestedInput
    review?: ReviewUpdateManyWithoutWineNestedInput
    Shopping?: ShoppingUpdateOneWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutHarmonyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
    review?: ReviewUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutHarmonyInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    vinicula?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    alchoolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    grapeId?: IntFieldUpdateOperationsInput | number
    shoppingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReviewUpdateWithoutWineInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyWithoutWineInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingCountOutputTypeDefaultArgs instead
     */
    export type ShoppingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeCountOutputTypeDefaultArgs instead
     */
    export type TypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryCountOutputTypeDefaultArgs instead
     */
    export type CountryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrapeCountOutputTypeDefaultArgs instead
     */
    export type GrapeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrapeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HarmonyCountOutputTypeDefaultArgs instead
     */
    export type HarmonyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HarmonyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WineCountOutputTypeDefaultArgs instead
     */
    export type WineCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingDefaultArgs instead
     */
    export type ShoppingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeDefaultArgs instead
     */
    export type TypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryDefaultArgs instead
     */
    export type CountryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrapeDefaultArgs instead
     */
    export type GrapeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrapeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HarmonyDefaultArgs instead
     */
    export type HarmonyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HarmonyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WineDefaultArgs instead
     */
    export type WineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WineDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}